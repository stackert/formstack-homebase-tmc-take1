{
  "openapi": "3.0.0",
  "info": {
    "title": "SSO API",
    "version": "1.0"
  },
  "servers": [
    {
      "url": "https://admin.dev-formstack.com:8085/api/v1",
      "description": "Local Dev Version"
    }
  ],
  "paths": {
    "/billing/addPaidPlan/{handle}": {
      "post": {
        "tags": ["Billing"],
        "operationId": "addPaidPlan",
        "parameters": [
          {
            "name": "handle",
            "in": "path",
            "description": "Handle of the plan you wish to add",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "p:forms-starter"
          }
        ],
        "responses": {
          "204": {
            "description": "The plan was added added"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Organization does not use FSID managed billing or non existant plan handle"
          },
          "422": {
            "description": "Cannot add the plan as you either already have it or it is not for sale"
          }
        }
      }
    },
    "/billing/addPaidPlan/{handle}/preview": {
      "post": {
        "tags": ["Billing"],
        "operationId": "addPaidPlanPreview",
        "parameters": [
          {
            "name": "handle",
            "in": "path",
            "description": "Handle of the plan you wish to add",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "p:forms-starter"
          }
        ],
        "responses": {
          "200": {
            "description": "Preview showing new regular bill amount and immediate charge that would happen when adding",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingChangePreview"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Organization does not use FSID managed billing or non existant plan handle"
          },
          "422": {
            "description": "Cannot add the plan as you either already have it or it is not for sale"
          }
        }
      }
    },
    "/billing/addons/start-trial/{handle}": {
      "post": {
        "tags": ["Billing"],
        "operationId": "addonStartTrial",
        "parameters": [
          {
            "name": "handle",
            "in": "path",
            "description": "Handle of the addon you wish to start a trial for",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "p:forms-workflows"
          }
        ],
        "responses": {
          "204": {
            "description": "The trial was added"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Organization does not use FSID managed billing or non existant plan handle"
          },
          "422": {
            "description": "Cannot start trial because you either hold the addon already or do not have a plan allowing it"
          }
        }
      }
    },
    "/billing/addons/{handle}": {
      "post": {
        "tags": ["Billing"],
        "operationId": "addonAdd",
        "parameters": [
          {
            "name": "handle",
            "in": "path",
            "description": "Handle of the addon you wish to add",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "p:forms-workflows"
          }
        ],
        "responses": {
          "204": {
            "description": "The addon was added added"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Organization does not use FSID managed billing or non existant plan handle"
          },
          "422": {
            "description": "Cannot add the addon because you already hold it or do not have a plan allowing it"
          }
        }
      },
      "delete": {
        "tags": ["Billing"],
        "operationId": "addonRemove",
        "parameters": [
          {
            "name": "handle",
            "in": "path",
            "description": "Handle of the addon you wish to remove",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "p:forms-workflows"
          }
        ],
        "responses": {
          "204": {
            "description": "The addon was added removed"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Organization does not use FSID managed billing or non existant plan handle"
          },
          "422": {
            "description": "Cannot add the addon because you do not hold it currently"
          }
        }
      },
      "patch": {
        "tags": ["Billing"],
        "operationId": "addonUpdate",
        "parameters": [
          {
            "name": "handle",
            "in": "path",
            "description": "Handle of the addon you wish to update",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "c:docs-flex-75-merges"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "quantity": {
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The addon quantity was adjusted"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Organization does not use FSID managed billing or non existant plan handle"
          },
          "422": {
            "description": "Cannot adjust the addon quantity because you do not hold it currently"
          }
        }
      }
    },
    "/billing/addons/{handle}/preview": {
      "post": {
        "tags": ["Billing"],
        "operationId": "addonAddPreview",
        "parameters": [
          {
            "name": "handle",
            "in": "path",
            "description": "Handle of the addon you wish to preview adding",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "p:forms-workflows"
          }
        ],
        "responses": {
          "200": {
            "description": "Preview showing new regular bill amount and immediate charge that would happen when adding",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingChangePreview"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Organization does not use FSID managed billing or non existant plan handle"
          },
          "422": {
            "description": "Cannot add the addon because you already hold it or do not have a plan allowing it"
          }
        }
      },
      "delete": {
        "tags": ["Billing"],
        "operationId": "addonRemovePreview",
        "parameters": [
          {
            "name": "handle",
            "in": "path",
            "description": "Handle of the addon you wish to preview removing",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "p:forms-workflows"
          }
        ],
        "responses": {
          "200": {
            "description": "Preview showing new regular bill amount and immediate charge that would happen when removing",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingChangePreview"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Organization does not use FSID managed billing or non existant plan handle"
          },
          "422": {
            "description": "Cannot remove the addon because you do not hold it"
          }
        }
      },
      "patch": {
        "tags": ["Billing"],
        "operationId": "addonUpdatePreview",
        "parameters": [
          {
            "name": "handle",
            "in": "path",
            "description": "Handle of the addon you wish to update",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "c:docs-flex-75-merges"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "quantity": {
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Preview showing new auto upgrade feature quantity amount and resulting total count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutoUpgradeChangePreview"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Organization does not use FSID managed billing or non existant plan handle"
          },
          "422": {
            "description": "Cannot adjust the addon quantity because you do not hold it currently"
          }
        }
      }
    },
    "/billing/cancelPaidPlan/{planHandle}": {
      "delete": {
        "tags": ["Billing"],
        "operationId": "cancelPlan",
        "parameters": [
          {
            "name": "planHandle",
            "in": "path",
            "description": "Plan Handle",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "p:forms-teams"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "scheduled_removal",
                        "scheduled_downgrade_to_free"
                      ]
                    },
                    "nextRenewalDate": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Organization does not use FSID managed billing or plan unpaid or already scheduled for removal"
          },
          "422": {
            "description": "Cannot cancel app"
          }
        }
      }
    },
    "/billing/cancelPaidPlan/{planHandle}/preview": {
      "delete": {
        "tags": ["Billing"],
        "operationId": "cancelPlanPreview",
        "parameters": [
          {
            "name": "planHandle",
            "in": "path",
            "description": "Plan Handle",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "p:forms-teams"
          }
        ],
        "responses": {
          "200": {
            "description": "Preview showing whether plan would be cancelled or downgraded to free",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancelPlanPreview"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Organization does not use FSID managed billing or plan unpaid or already scheduled for removal"
          },
          "422": {
            "description": "Cannot cancel app"
          }
        }
      }
    },
    "/billing/comparePlans/{planA}/{planB}": {
      "get": {
        "tags": ["Billing"],
        "operationId": "comparePlans",
        "parameters": [
          {
            "name": "planA",
            "in": "path",
            "description": "Handle of the plan you want to compare",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "p:forms-starter"
          },
          {
            "name": "planB",
            "in": "path",
            "description": "Handle of the plan you want to compare to",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "p:forms-pro"
          }
        ],
        "responses": {
          "200": {
            "description": "The plan comparison response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "plans": {
                      "type": "object",
                      "additionalProperties": true
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Organization does not use FSID managed billing or non existant plan handle"
          },
          "422": {
            "description": "Cannot add the plan as you either already have it or it is not for sale"
          }
        }
      }
    },
    "/billing/component-order": {
      "get": {
        "tags": ["Billing"],
        "operationId": "getNewPurchaseOrderForm",
        "responses": {
          "200": {
            "description": "Get an initial purchase order for that can be filled out",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingComponentPurchaseOrderForm"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": ["Billing"],
        "operationId": "purchaseOrderFormSubmit",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BillingComponentPurchaseOrderForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Purchase order was processed",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Your purchase has been processed"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/billing/component-order/preview": {
      "post": {
        "tags": ["Billing"],
        "operationId": "previewPurchaseOrderFormSubmit",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BillingComponentPurchaseOrderForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Send a purchase order form to get the same form returned with an updated price",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingComponentPurchaseOrderForm"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/billing/concurrentTrialWorkflows/{handle}/startTrial": {
      "post": {
        "tags": ["Billing"],
        "operationId": "concurrentTrialStartTrial",
        "parameters": [
          {
            "name": "handle",
            "in": "path",
            "description": "New Plan Handle",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "p:formstack-2024-suite"
          }
        ],
        "responses": {
          "204": {
            "description": "Trial Started"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Organization does not use FSID managed billing or non existant plan handle"
          },
          "422": {
            "description": "Cannot start trial because plan is not allowed"
          }
        }
      }
    },
    "/billing/concurrentTrialWorkflows/{handle}/switchPreview": {
      "post": {
        "tags": ["Billing"],
        "operationId": "concurrentTrialStartSwitchPreview",
        "parameters": [
          {
            "name": "handle",
            "in": "path",
            "description": "New Plan Handle",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "p:formstack-2024-suite"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a preview converting this trial and removing the old plan",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingChangePreview"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Organization does not use FSID managed billing or non existant plan handle"
          },
          "422": {
            "description": "Cannot switch to this plan"
          }
        }
      }
    },
    "/billing/concurrentTrialWorkflows/{handle}/switch": {
      "post": {
        "tags": ["Billing"],
        "operationId": "concurrentTrialStartSwitch",
        "parameters": [
          {
            "name": "handle",
            "in": "path",
            "description": "New Plan Handle",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "p:formstack-2024-suite"
          }
        ],
        "responses": {
          "204": {
            "description": "Account was migrated onto the new plan"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Organization does not use FSID managed billing or non existant plan handle"
          },
          "422": {
            "description": "Cannot switch to this plan"
          }
        }
      }
    },
    "/billing/contact": {
      "put": {
        "tags": ["Billing"],
        "operationId": "updateBillingContact",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationBillingContact"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Contact was updated"
          },
          "403": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/billing/invoices": {
      "get": {
        "tags": ["Billing"],
        "operationId": "getCurrentOrganizationInvoices",
        "responses": {
          "200": {
            "description": "Get a list of invoices",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "invoices": {
                      "title": "invoices",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Invoice"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/billing/invoiceRecipients": {
      "get": {
        "tags": ["Billing"],
        "operationId": "getInvoiceRecipients",
        "responses": {
          "200": {
            "description": "Invoice recipients emails",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "emails": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": ["Billing"],
        "operationId": "updateInvoiceRecipients",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "emails": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/billing/migrate2024Pricing/{checkSum}": {
      "post": {
        "tags": ["Billing"],
        "operationId": "submitMigrate2024Pricing",
        "parameters": [
          {
            "name": "checkSum",
            "in": "path",
            "description": "UpgradePackage checksum",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Migration done"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Organization does not use FSID managed billing or non existant plan handle"
          },
          "422": {
            "description": "Cannot add the plan as you either already have it or it is not for sale"
          }
        }
      }
    },
    "/billing/migrate2024Pricing/{checkSum}/preview": {
      "post": {
        "tags": ["Billing"],
        "operationId": "previewMigrate2024Pricing",
        "parameters": [
          {
            "name": "checkSum",
            "in": "path",
            "description": "UpgradePackage checksum",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Preview showing new regular bill amount and immediate charge that would happen when adding",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingChangePreview"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Organization does not use FSID managed billing or non existant plan handle"
          },
          "422": {
            "description": "Cannot add the plan as you either already have it or it is not for sale"
          }
        }
      }
    },
    "/billing/currentOrganization": {
      "get": {
        "tags": ["Billing"],
        "operationId": "getCurrentOrganizationBillingDetails",
        "responses": {
          "200": {
            "description": "Get Organization billing Details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationBillingDetails"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized"
          },
          "404": {
            "description": "Organization could not be found"
          },
          "405": {
            "description": "Not applicable for this organization"
          }
        }
      }
    },
    "/billing/currentOrganization/periodicity": {
      "get": {
        "tags": ["Billing"],
        "operationId": "getCurrentOrganizationBillingPeriodicity",
        "responses": {
          "200": {
            "description": "Get the organization billing periodicity",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "periodicity": {
                      "title": "periodicity",
                      "type": "string",
                      "example": "monthly"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Organization could not be found"
          },
          "405": {
            "description": "Not applicable for this organization"
          }
        }
      }
    },
    "/billing/currentOrganization/periodicity/{newPeriodicity}": {
      "post": {
        "tags": ["Billing"],
        "operationId": "changeCurrentOrganizationBillingPeriodicity",
        "parameters": [
          {
            "name": "newPeriodicity",
            "in": "path",
            "description": "new periodicity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "periodicity": {
                    "title": "periodicity",
                    "type": "string",
                    "example": "monthly"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Updated organization billing periodicity"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Organization could not be found"
          },
          "405": {
            "description": "Not applicable for this organization"
          }
        }
      }
    },
    "/billing/currentOrganization/periodicity/{newPeriodicity}/preview": {
      "post": {
        "tags": ["Billing"],
        "operationId": "previewChangeCurrentOrganizationBillingPeriodicity",
        "parameters": [
          {
            "name": "newPeriodicity",
            "in": "path",
            "description": "new periodicity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "periodicity": {
                    "title": "periodicity",
                    "type": "string",
                    "example": "monthly"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Get a preview for changing periodicity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingChangePreview"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Organization could not be found"
          },
          "405": {
            "description": "Not applicable for this organization"
          }
        }
      }
    },
    "/billing/currentOrganization/setAutoUpgradeUsage": {
      "post": {
        "tags": ["Billing"],
        "operationId": "setAutoUpgradeUsage",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "value": {
                    "title": "value",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Updated organization billing periodicity"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Organization could not be found"
          },
          "405": {
            "description": "Not applicable for this organization"
          }
        }
      }
    },
    "/billing/currentOrganization/refreshAppUsage": {
      "post": {
        "tags": ["Billing"],
        "operationId": "refreshAppUsage",
        "responses": {
          "204": {
            "description": "no content"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Organization could not be found"
          },
          "405": {
            "description": "Not applicable for this organization"
          }
        }
      }
    },
    "/billing/planMigrations/{oldPlanHandle}/{newPlanHandle}/preview": {
      "post": {
        "tags": ["Billing"],
        "operationId": "planMigrationPreview",
        "parameters": [
          {
            "name": "oldPlanHandle",
            "in": "path",
            "description": "Old Plan Handle",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "p:platform-starter"
          },
          {
            "name": "newPlanHandle",
            "in": "path",
            "description": "New Plan Handle",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "p:platform-pro"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a preview for migrating plans",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingChangePreview"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Organization does not use FSID managed billing or non existant plan handle"
          },
          "422": {
            "description": "Cannot migrate because subscription either scheduled for cancelation or invalid plan"
          }
        }
      }
    },
    "/billing/planMigrations/{oldPlanHandle}/{newPlanHandle}": {
      "post": {
        "tags": ["Billing"],
        "operationId": "planMigration",
        "parameters": [
          {
            "name": "oldPlanHandle",
            "in": "path",
            "description": "Old Plan Handle",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "p:platform-starter"
          },
          {
            "name": "newPlanHandle",
            "in": "path",
            "description": "New Plan Handle",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "p:platform-pro"
          }
        ],
        "responses": {
          "204": {
            "description": "Migration was sucessful"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Organization does not use FSID managed billing or non existant plan handle"
          },
          "422": {
            "description": "Cannot migrate because subscription either scheduled for cancelation or invalid plan"
          }
        }
      }
    },
    "/billing/start-app-trial/{appId}": {
      "post": {
        "tags": ["Billing"],
        "operationId": "appStartTrial",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "description": "Application id you wish to start a trial for",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "formstack_classic"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "needs_approval",
                        "processing",
                        "existing_app_membership"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Organization does not use FSID managed billing or non existant plan handle"
          },
          "422": {
            "description": "Cannot start trial because organization has app access already"
          }
        }
      }
    },
    "/billing/subaccounts/{orgId}/addPaidPlan/{handle}": {
      "post": {
        "tags": ["SubaccountBilling"],
        "operationId": "subaccounts/addPaidPlan",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Subaccount ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "handle",
            "in": "path",
            "description": "Handle of the plan you wish to add",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "p:forms-starter"
          }
        ],
        "responses": {
          "204": {
            "description": "The plan was added added"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Organization does not use FSID managed billing or non existant plan handle"
          },
          "422": {
            "description": "Cannot add the plan as you either already have it or it is not for sale"
          }
        }
      }
    },
    "/billing/subaccounts/{orgId}/addPaidPlan/{handle}/preview": {
      "post": {
        "tags": ["SubaccountBilling"],
        "operationId": "subaccounts/addPaidPlanPreview",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Subaccount ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "handle",
            "in": "path",
            "description": "Handle of the plan you wish to add",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "p:forms-starter"
          }
        ],
        "responses": {
          "200": {
            "description": "Preview showing new regular bill amount and immediate charge that would happen when adding",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingChangePreview"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Organization does not use FSID managed billing or non existant plan handle"
          },
          "422": {
            "description": "Cannot add the plan as you either already have it or it is not for sale"
          }
        }
      }
    },
    "/billing/subaccounts/{orgId}/addons/start-trial/{handle}": {
      "post": {
        "tags": ["SubaccountBilling"],
        "operationId": "subaccounts/addonStartTrial",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Subaccount ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "handle",
            "in": "path",
            "description": "Handle of the addon you wish to start a trial for",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "p:forms-workflows"
          }
        ],
        "responses": {
          "204": {
            "description": "The trial was added"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Organization does not use FSID managed billing or non existant plan handle"
          },
          "422": {
            "description": "Cannot start trial because you either hold the addon already or do not have a plan allowing it"
          }
        }
      }
    },
    "/billing/subaccounts/{orgId}/addons/{handle}": {
      "post": {
        "tags": ["SubaccountBilling"],
        "operationId": "subaccounts/addonAdd",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Subaccount ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "handle",
            "in": "path",
            "description": "Handle of the addon you wish to add",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "p:forms-workflows"
          }
        ],
        "responses": {
          "204": {
            "description": "The addon was added added"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Organization does not use FSID managed billing or non existant plan handle"
          },
          "422": {
            "description": "Cannot add the addon because you already hold it or do not have a plan allowing it"
          }
        }
      },
      "delete": {
        "tags": ["SubaccountBilling"],
        "operationId": "subaccounts/addonRemove",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Subaccount ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "handle",
            "in": "path",
            "description": "Handle of the addon you wish to remove",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "p:forms-workflows"
          }
        ],
        "responses": {
          "204": {
            "description": "The addon was added removed"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Organization does not use FSID managed billing or non existant plan handle"
          },
          "422": {
            "description": "Cannot add the addon because you do not hold it currently"
          }
        }
      }
    },
    "/billing/subaccounts/{orgId}/addons/{handle}/preview": {
      "post": {
        "tags": ["SubaccountBilling"],
        "operationId": "subaccounts/addonAddPreview",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Subaccount ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "handle",
            "in": "path",
            "description": "Handle of the addon you wish to preview adding",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "p:forms-workflows"
          }
        ],
        "responses": {
          "200": {
            "description": "Preview showing new regular bill amount and immediate charge that would happen when adding",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingChangePreview"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Organization does not use FSID managed billing or non existant plan handle"
          },
          "422": {
            "description": "Cannot add the addon because you already hold it or do not have a plan allowing it"
          }
        }
      },
      "delete": {
        "tags": ["SubaccountBilling"],
        "operationId": "subaccounts/addonRemovePreview",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Subaccount ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "handle",
            "in": "path",
            "description": "Handle of the addon you wish to preview removing",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "p:forms-workflows"
          }
        ],
        "responses": {
          "200": {
            "description": "Preview showing new regular bill amount and immediate charge that would happen when removing",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingChangePreview"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Organization does not use FSID managed billing or non existant plan handle"
          },
          "422": {
            "description": "Cannot remove the addon because you do not hold it"
          }
        }
      }
    },
    "/billing/subaccounts/buildNew/finalize": {
      "post": {
        "tags": ["SubaccountBilling"],
        "operationId": "createNewSubaccount",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSubaccountRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subaccount was created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "422": {
            "description": "Errors occured",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_validation_error"
                }
              }
            }
          }
        }
      }
    },
    "/billing/subaccounts/{orgId}/cancelPaidPlan/{planHandle}": {
      "delete": {
        "tags": ["SubaccountBilling"],
        "operationId": "subaccounts/cancelPlan",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "ID of organization",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "planHandle",
            "in": "path",
            "description": "Plan Handle",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "p:forms-teams"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "scheduled_removal",
                        "scheduled_downgrade_to_free"
                      ]
                    },
                    "nextBillDate": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Organization does not use FSID managed billing or plan unpaid or already scheduled for removal"
          },
          "422": {
            "description": "Cannot cancel app"
          }
        }
      }
    },
    "/billing/subaccounts/{orgId}/cancelPaidPlan/{planHandle}/preview": {
      "delete": {
        "tags": ["SubaccountBilling"],
        "operationId": "subaccounts/cancelPlanPreview",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "planHandle",
            "in": "path",
            "description": "Plan Handle",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "p:forms-teams"
          }
        ],
        "responses": {
          "200": {
            "description": "Preview showing whether plan would be cancelled or downgraded to free",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancelPlanPreview"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Organization does not use FSID managed billing or plan unpaid or already scheduled for removal"
          },
          "422": {
            "description": "Cannot cancel app"
          }
        }
      }
    },
    "/billing/subaccounts/{orgId}/component-order": {
      "get": {
        "tags": ["SubaccountBilling"],
        "operationId": "subaccountGetNewPurchaseOrderForm",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Subaccount ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get an initial purchase order for that can be filled out",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingComponentPurchaseOrderForm"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": ["SubaccountBilling"],
        "operationId": "subaccountPurchaseOrderFormSubmit",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Subaccount ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BillingComponentPurchaseOrderForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Purchase order was processed",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Your purchase has been processed"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/billing/subaccounts/{orgId}/component-order/preview": {
      "post": {
        "tags": ["SubaccountBilling"],
        "operationId": "subaccountPreviewPurchaseOrderFormSubmit",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Subaccount ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BillingComponentPurchaseOrderForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Send a purchase order form to get the same form returned with an updated price",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingComponentPurchaseOrderForm"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/billing/subaccounts/{uuid}/periodicity/{newPeriodicity}": {
      "post": {
        "tags": ["SubaccountBilling"],
        "operationId": "changeSubaccountBillingPeriodicity",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "Subaccount ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "newPeriodicity",
            "in": "path",
            "description": "new periodicity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Updated organization billing periodicity"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Organization could not be found"
          },
          "405": {
            "description": "Not applicable for this organization"
          }
        }
      }
    },
    "/billing/subaccounts/{uuid}/periodicity/{newPeriodicity}/preview": {
      "post": {
        "tags": ["SubaccountBilling"],
        "operationId": "previewChangeSubaccountBillingPeriodicity",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "Subaccount ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "newPeriodicity",
            "in": "path",
            "description": "new periodicity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a preview for changing periodicity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingChangePreview"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Organization could not be found"
          },
          "405": {
            "description": "Not applicable for this organization"
          }
        }
      }
    },
    "/billing/subaccounts/{orgId}/migrate2024Pricing/{checkSum}": {
      "post": {
        "tags": ["Billing"],
        "operationId": "submitMigrate2024PricingSubaccount",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Subaccount ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "checkSum",
            "in": "path",
            "description": "UpgradePackage checksum",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Migration done"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Organization does not use FSID managed billing or non existant plan handle"
          },
          "422": {
            "description": "Cannot add the plan as you either already have it or it is not for sale"
          }
        }
      }
    },
    "/billing/subaccounts/{orgId}/migrate2024Pricing/{checkSum}/preview": {
      "post": {
        "tags": ["Billing"],
        "operationId": "previewMigrate2024PricingSubaccount",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Subaccount ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "checkSum",
            "in": "path",
            "description": "UpgradePackage checksum",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Preview showing new regular bill amount and immediate charge that would happen when adding",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingChangePreview"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Organization does not use FSID managed billing or non existant plan handle"
          },
          "422": {
            "description": "Cannot add the plan as you either already have it or it is not for sale"
          }
        }
      }
    },
    "/billing/subaccounts/{orgId}/planMigrations/{oldPlanHandle}/{newPlanHandle}/preview": {
      "post": {
        "tags": ["SubaccountBilling"],
        "operationId": "subaccountPlanMigrationPreview",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Subaccount ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "oldPlanHandle",
            "in": "path",
            "description": "Old Plan Handle",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "p:platform-starter"
          },
          {
            "name": "newPlanHandle",
            "in": "path",
            "description": "New Plan Handle",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "p:platform-pro"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a preview for migrating plans for a particular subaccount",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingChangePreview"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Organization does not use FSID managed billing or non existant plan handle"
          },
          "422": {
            "description": "Cannot migrate because subscription either scheduled for cancelation or invalid plan"
          }
        }
      }
    },
    "/billing/subaccounts/{orgId}/planMigrations/{oldPlanHandle}/{newPlanHandle}": {
      "post": {
        "tags": ["SubaccountBilling"],
        "operationId": "subaccountPlanMigration",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "Subaccount ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "oldPlanHandle",
            "in": "path",
            "description": "Old Plan Handle",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "p:platform-starter"
          },
          {
            "name": "newPlanHandle",
            "in": "path",
            "description": "New Plan Handle",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "p:platform-pro"
          }
        ],
        "responses": {
          "204": {
            "description": "Migration was sucessful"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Organization does not use FSID managed billing or non existant plan handle"
          },
          "422": {
            "description": "Cannot migrate because subscription either scheduled for cancelation or invalid plan"
          }
        }
      }
    },
    "/billing/subaccounts/{organizationId}/suspend": {
      "post": {
        "tags": ["SubaccountBilling"],
        "operationId": "suspendSubaccount",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "ID of the subaccounts organization",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Subaccount was suspended"
          },
          "404": {
            "description": "Subaccount not found"
          }
        }
      }
    },
    "/billing/subaccounts/{organizationId}/unsuspend": {
      "post": {
        "tags": ["SubaccountBilling"],
        "operationId": "unsuspendSubaccount",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "ID of the subaccounts organization",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Subaccount was unsuspended"
          },
          "404": {
            "description": "Subaccount not found"
          }
        }
      }
    },
    "/billing/subaccounts/{organizationId}": {
      "delete": {
        "tags": ["SubaccountBilling"],
        "operationId": "unlinkSubaccount",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "ID of the subaccounts organization",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Subaccount was unlinked"
          },
          "404": {
            "description": "Subaccount not found"
          }
        }
      }
    },
    "/billing/update-card-details": {
      "get": {
        "tags": ["Billing"],
        "operationId": "updateCardDetailsFormData",
        "responses": {
          "200": {
            "description": "Get the data neccessary to render credit card form for updating card details",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "iframeParams": {
                      "title": "iframeParams",
                      "type": "object",
                      "additionalProperties": true
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "tags": ["Billing"],
        "description": "Accepts Payload from Zuora hosted payment page callback",
        "operationId": "updateCardDetails",
        "responses": {
          "204": {
            "description": "Everything updated sucessfully"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/homepage": {
      "get": {
        "tags": ["Homepage"],
        "operationId": "homepage.index",
        "responses": {
          "200": {
            "description": "Homepage widgets",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HomepageWidgets"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/homepage/quickPaths": {
      "post": {
        "tags": ["Homepage"],
        "operationId": "quickPathAdd",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string"
                  },
                  "pinToOrganization": {
                    "type": "boolean",
                    "nullable": true
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created quick path",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HomepageQuickPath"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Cannot add the quick path"
          }
        }
      }
    },
    "/homepage/quickPaths/{id}": {
      "put": {
        "tags": ["Homepage"],
        "description": "Update quick path",
        "operationId": "quickPathUpdate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of quickpath",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HomepageQuickPath"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated quick path",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HomepageQuickPath"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Quick path not found"
          }
        }
      },
      "delete": {
        "tags": ["Homepage"],
        "description": "Remove quick path",
        "operationId": "quickPathDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of quickpath",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Quick path not found"
          }
        }
      }
    },
    "/activation/survey": {
      "put": {
        "tags": ["Activation"],
        "operationId": "setSurvey",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "industry": {
                    "type": "string"
                  },
                  "role": {
                    "type": "string"
                  },
                  "goal": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/activation/templates": {
      "get": {
        "tags": ["Activation"],
        "operationId": "getTemplates",
        "parameters": [
          {
            "name": "appId",
            "in": "query",
            "description": "ID of app",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Templates content"
          },
          "403": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/organizations/current/apps": {
      "get": {
        "tags": ["Organization"],
        "operationId": "getApps",
        "responses": {
          "200": {
            "description": "Get apps for non-platform-plan org",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationAppsPage"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized"
          },
          "404": {
            "description": "Organization could not be found"
          }
        }
      }
    },
    "/organizations/current/members/bulkUpdateOrganizationRole": {
      "post": {
        "tags": ["BulkMembership"],
        "description": "Bulk update memberships' organization role",
        "operationId": "bulkUpdateOrganizationRole",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "membershipIds": {
                    "title": "ids",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  },
                  "organizationRole": {
                    "title": "organizationRole",
                    "type": "string",
                    "example": "admin"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Memberships",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Membership"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/current/members/bulkUpdateRoles": {
      "post": {
        "tags": ["BulkMembership"],
        "description": "Bulk update memberships' roles",
        "operationId": "bulkUpdateRoles",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "properties": {
                        "membershipId": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "productId": {
                          "type": "string",
                          "example": "formstack_classic"
                        },
                        "role": {
                          "type": "string",
                          "example": "admin"
                        }
                      },
                      "type": "object"
                    }
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Membership not be found"
          },
          "422": {
            "description": "Errors occured",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_validation_error"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/current/members/bulkDelete": {
      "post": {
        "tags": ["BulkMembership"],
        "description": "Remove members from organization",
        "operationId": "bulkDelete",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "membershipIds": {
                    "title": "ids",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated org user limits",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationProductUserLimits"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Membership not be found"
          }
        }
      }
    },
    "/organizations/current/members/bulkSendInvitation": {
      "post": {
        "tags": ["BulkMembership"],
        "description": "Bulk resend invitations email",
        "operationId": "bulkResendInvitation",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "membershipIds": {
                    "title": "ids",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "405": {
            "description": "Not applicable for users"
          },
          "422": {
            "description": "Errors occured",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_validation_error"
                }
              }
            }
          },
          "404": {
            "description": "Membership not be found"
          }
        }
      }
    },
    "/organizations/current/members/bulkInviteTemplate": {
      "get": {
        "tags": ["BulkMembership"],
        "description": "Download bulk invite csv template",
        "operationId": "getBulkInviteTemplate",
        "responses": {
          "200": {
            "description": "bulk upload csv template"
          },
          "403": {
            "description": "Unathorized"
          },
          "422": {
            "description": "Errors occured",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_validation_error"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/current/members/bulkInvitePreview": {
      "post": {
        "tags": ["BulkMembership"],
        "description": "Bulk invite: preview",
        "operationId": "bulkInvitePreview",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "inviteesCsv": {
                    "description": "invitees csv",
                    "type": "string",
                    "format": "binary"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Preview response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkInvitePreview"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized"
          },
          "422": {
            "description": "Errors occured",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_validation_error"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/current/members/bulkInvite": {
      "post": {
        "tags": ["BulkMembership"],
        "description": "Bulk invite",
        "operationId": "bulkInvite",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "inviteesCsv": {
                    "description": "invitees csv",
                    "type": "string",
                    "format": "binary"
                  },
                  "roles": {
                    "description": "app roles (app id => role pairs)",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "permissions": {
                    "description": "list of permissions",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Bulk invite result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkInviteResult"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized"
          },
          "422": {
            "description": "Errors occured",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_validation_error"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/current/cancelationSurvey": {
      "post": {
        "tags": ["Organization"],
        "operationId": "storeCancelationSurvey",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "data": {
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Survey data was stored"
          }
        }
      }
    },
    "/organizations/current/formsAutoDeleteSubmissionsSettings/available": {
      "post": {
        "tags": ["Organization"],
        "description": "Toggle available status without enabling the feature",
        "operationId": "toggleFormsAutoDeleteSubmissionsSettings",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "available": {
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "success"
          },
          "403": {
            "description": "Unathorized"
          },
          "422": {
            "description": "Errors occured",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_validation_error"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/current/formsAutoDeleteSubmissionsSettings": {
      "put": {
        "tags": ["Organization"],
        "description": "Update settings once toggled to available",
        "operationId": "updateFormsAutoDeleteSubmissionsSettings",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FormsAutoDeleteSubmissionsSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormsAutoDeleteSubmissionsSettings"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized"
          },
          "422": {
            "description": "Errors occured",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_validation_error"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/current/groups": {
      "get": {
        "tags": ["Group"],
        "operationId": "searchGroups",
        "parameters": [
          {
            "name": "searchTerm",
            "in": "query",
            "description": "Filter by name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "perPage",
            "in": "query",
            "description": "Per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "enum": [10, 25, 50]
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Order by",
            "required": false,
            "schema": {
              "type": "string",
              "default": "createdAt",
              "enum": ["name", "createdAt", "membersCount"]
            }
          },
          {
            "name": "orderDir",
            "in": "query",
            "description": "Order dir",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "organization groups results",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "total": {
                      "title": "total",
                      "type": "integer"
                    },
                    "page": {
                      "title": "page",
                      "type": "integer"
                    },
                    "data": {
                      "title": "result set",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Group"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized"
          },
          "404": {
            "description": "Organization could not be found"
          }
        }
      },
      "post": {
        "tags": ["Group"],
        "description": "Create new group",
        "operationId": "8dcf29a617d27f78df2af6ba40b27926",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string",
                    "nullable": true
                  },
                  "addYourselfToGroup": {
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          },
          "422": {
            "description": "Errors occured",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_validation_error"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/current/groups/csv": {
      "post": {
        "tags": ["Group"],
        "description": "Export organization groups as csv attachment",
        "operationId": "exportGroups",
        "parameters": [
          {
            "name": "_async_web_request_id",
            "in": "query",
            "description": "Optional random value to make the request asynchronous. If specified, a 202 status code will be returned, indicating the request has been queued. Initial request must be xhr",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "groupIds": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Organization groups"
          },
          "202": {
            "description": "Request has been queued"
          },
          "403": {
            "description": "Unathorized"
          },
          "404": {
            "description": "Organization could not be found"
          }
        }
      }
    },
    "/organizations/current/groups/{groupId}": {
      "get": {
        "tags": ["Group"],
        "description": "Get single group",
        "operationId": "getGroup",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "ID of group",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          },
          "404": {
            "description": "Group not be found"
          }
        }
      },
      "put": {
        "tags": ["Group"],
        "description": "Update group",
        "operationId": "updateGroup",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "ID of group",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string",
                    "nullable": true
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          },
          "404": {
            "description": "Group not found"
          },
          "422": {
            "description": "Errors occured",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_validation_error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Group"],
        "description": "Delete a group",
        "operationId": "deleteGroup",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "ID of group",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          },
          "404": {
            "description": "Group not be found"
          }
        }
      }
    },
    "/organizations/current/groups/{groupId}/members": {
      "get": {
        "tags": ["Group"],
        "description": "Get group members",
        "operationId": "getGroupMembers",
        "parameters": [
          {
            "name": "searchTerm",
            "in": "query",
            "description": "Filter by name/email",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "perPage",
            "in": "query",
            "description": "Per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "enum": [10, 25, 50]
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Order by",
            "required": false,
            "schema": {
              "type": "string",
              "default": "createdAt",
              "enum": ["name", "createdAt", "membersCount"]
            }
          },
          {
            "name": "orderDir",
            "in": "query",
            "description": "Order dir",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"]
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "ID of group",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group members",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "total": {
                      "title": "total",
                      "type": "integer"
                    },
                    "page": {
                      "title": "page",
                      "type": "integer"
                    },
                    "data": {
                      "title": "result set",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Membership"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized"
          },
          "404": {
            "description": "Group not found"
          }
        }
      },
      "post": {
        "tags": ["Group"],
        "description": "Add new group member",
        "operationId": "addGroupMember",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "ID of group",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "membershipId": {
                    "type": "string",
                    "format": "uuid"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Membership details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Membership"
                }
              }
            }
          },
          "400": {
            "description": "Member not found"
          },
          "404": {
            "description": "Group not found"
          },
          "422": {
            "description": "Errors occured",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_validation_error"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/current/groups/{groupId}/members/bulkDelete": {
      "post": {
        "tags": ["Group"],
        "description": "Delete group members in bulk",
        "operationId": "bulkDeleteGroupMembers",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "ID of group",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "membershipIds": {
                    "title": "ids",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Membership details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Membership"
                }
              }
            }
          },
          "400": {
            "description": "Member not found"
          },
          "404": {
            "description": "Group not found"
          }
        }
      }
    },
    "/organizations/current/groups/{groupId}/members/{membershipId}": {
      "delete": {
        "tags": ["Group"],
        "description": "Delete group member",
        "operationId": "deleteGroupMember",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "ID of group",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "membershipId",
            "in": "path",
            "description": "Membership id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Membership details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Membership"
                }
              }
            }
          },
          "400": {
            "description": "Member not found"
          },
          "404": {
            "description": "Group not found"
          }
        }
      }
    },
    "/organizations/current/members": {
      "get": {
        "tags": ["Membership"],
        "operationId": "searchMemberships",
        "parameters": [
          {
            "name": "role",
            "in": "query",
            "description": "Product Role",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organizationRole",
            "in": "query",
            "description": "Organization Role",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "product",
            "in": "query",
            "description": "Product",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "description": "Filter by name/email",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "memberType",
            "in": "query",
            "description": "Filter by member type",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["invitation", "user"]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "perPage",
            "in": "query",
            "description": "Per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "enum": [10, 25, 50]
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Order by",
            "required": false,
            "schema": {
              "type": "string",
              "default": "fullName",
              "enum": ["fullName", "lastLoginAt", "organizationRole"]
            }
          },
          {
            "name": "orderDir",
            "in": "query",
            "description": "Order dir",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "organization members results",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "total": {
                      "title": "total",
                      "type": "integer"
                    },
                    "page": {
                      "title": "page",
                      "type": "integer"
                    },
                    "data": {
                      "title": "result set",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Membership"
                      }
                    },
                    "summary": {
                      "$ref": "#/components/schemas/MembershipsSummary"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized"
          },
          "404": {
            "description": "Organization could not be found"
          }
        }
      },
      "put": {
        "tags": ["Membership"],
        "description": "Update current membership",
        "operationId": "updateCurrentMembership",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Membership"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Membership details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Membership"
                }
              }
            }
          },
          "404": {
            "description": "Membership not be found"
          },
          "422": {
            "description": "Errors occured",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_validation_error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Membership"],
        "description": "Invite new member",
        "operationId": "invite",
        "requestBody": {
          "description": "Membership.organization not required/used",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Membership"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created membership",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Membership"
                }
              }
            }
          },
          "422": {
            "description": "Errors occured",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_validation_error"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/current/members/admin": {
      "get": {
        "tags": ["Membership"],
        "operationId": "recentAdmins",
        "responses": {
          "200": {
            "description": "Get a list of recent admins",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "memberships": {
                      "title": "memberships",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Membership"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/organizations/current/members/{membershipId}": {
      "get": {
        "tags": ["Membership"],
        "description": "Get single membership",
        "operationId": "getMembership",
        "parameters": [
          {
            "name": "membershipId",
            "in": "path",
            "description": "ID of membership",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Membership details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Membership"
                }
              }
            }
          },
          "404": {
            "description": "Membership not be found"
          }
        }
      },
      "put": {
        "tags": ["Membership"],
        "description": "Update membership roles/permissions",
        "operationId": "updateMembership",
        "parameters": [
          {
            "name": "membershipId",
            "in": "path",
            "description": "ID of membership",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Membership"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Membership details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Membership"
                }
              }
            }
          },
          "404": {
            "description": "Membership not be found"
          },
          "422": {
            "description": "Errors occured",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_validation_error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Membership"],
        "description": "Remove member from organization",
        "operationId": "deleteMembership",
        "parameters": [
          {
            "name": "membershipId",
            "in": "path",
            "description": "ID of membership",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated org user limits",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationProductUserLimits"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Membership not be found"
          }
        }
      }
    },
    "/organizations/current/members/impersonationConsent": {
      "put": {
        "tags": ["Membership"],
        "description": "Update impersonation consent status",
        "operationId": "updateImpersonationConsent",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "enabled": {
                    "title": "enabled",
                    "type": "boolean"
                  },
                  "duration": {
                    "title": "duration",
                    "type": "string",
                    "enum": ["3 days", "1 week", "1 month", "2 months"]
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Membership details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Membership"
                }
              }
            }
          },
          "404": {
            "description": "Membership not be found"
          },
          "422": {
            "description": "Errors occured",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_validation_error"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/current/members/{membershipId}/deleteWithAdminReassign": {
      "post": {
        "tags": ["Membership"],
        "description": "Remove member from organization providing another user to reassign app admin roles to",
        "operationId": "deleteMembershipWithAdminReassign",
        "parameters": [
          {
            "name": "membershipId",
            "in": "path",
            "description": "ID of membership",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "reassignAppAdminRolesTo": {
                    "description": "Reassign app admin role to this user",
                    "type": "array",
                    "items": {
                      "properties": {
                        "productId": {
                          "description": "app id",
                          "type": "string",
                          "enum": [
                            "organization",
                            "formstack_classic",
                            "webmerge",
                            "insure_sign"
                          ]
                        },
                        "membershipId": {
                          "description": "Id of member to reassign admin role to",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "writeOnly": true
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated org user limits",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationProductUserLimits"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Membership not be found"
          }
        }
      }
    },
    "/organizations/current/members/{membershipId}/productRoles/{productId}": {
      "delete": {
        "tags": ["Membership"],
        "description": "Revoke single product role for member",
        "operationId": "deleteMemberProductRole",
        "parameters": [
          {
            "name": "membershipId",
            "in": "path",
            "description": "ID of membership",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "productId",
            "in": "path",
            "description": "ID of product",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated org-product user limits",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationProductUserLimits"
                }
              }
            }
          },
          "404": {
            "description": "Membership not be found"
          }
        }
      }
    },
    "/organizations/current/members/{membershipId}/deleteProductRoles": {
      "post": {
        "tags": ["Membership"],
        "description": "Revoke multiple product roles for member",
        "operationId": "batchDeleteMemberProductRoles",
        "parameters": [
          {
            "name": "membershipId",
            "in": "path",
            "description": "ID of membership",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "products": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated org user limits",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationProductUserLimits"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Membership not be found"
          }
        }
      }
    },
    "/organizations/current/members/{membershipId}/passwordResetRequest": {
      "post": {
        "tags": ["Membership"],
        "description": "Send password reset request for user",
        "operationId": "sendPasswordResetRequest",
        "parameters": [
          {
            "name": "membershipId",
            "in": "path",
            "description": "ID of membership",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "405": {
            "description": "Not applicable for invitations"
          },
          "422": {
            "description": "Errors occured",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_validation_error"
                }
              }
            }
          },
          "404": {
            "description": "Membership not be found"
          }
        }
      }
    },
    "/organizations/current/members/{membershipId}/secondFactors": {
      "delete": {
        "tags": ["Membership"],
        "description": "Reset 2fa for the user",
        "operationId": "removeMembersSecondFactors",
        "parameters": [
          {
            "name": "membershipId",
            "in": "path",
            "description": "ID of membership",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "405": {
            "description": "Not applicable for invitations"
          },
          "422": {
            "description": "Errors occured",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_validation_error"
                }
              }
            }
          },
          "404": {
            "description": "Membership not be found"
          }
        }
      }
    },
    "/organizations/current/members/{membershipId}/sendInvitation": {
      "post": {
        "tags": ["Membership"],
        "description": "Resend invitation email",
        "operationId": "resendInvitation",
        "parameters": [
          {
            "name": "membershipId",
            "in": "path",
            "description": "ID of membership",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "405": {
            "description": "Not applicable for users"
          },
          "422": {
            "description": "Errors occured",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_validation_error"
                }
              }
            }
          },
          "404": {
            "description": "Membership not be found"
          }
        }
      }
    },
    "/organizations/current/members/csv": {
      "get": {
        "tags": ["Membership"],
        "description": "Export organization members as csv attachment",
        "operationId": "exportMemberships",
        "parameters": [
          {
            "name": "_async_web_request_id",
            "in": "query",
            "description": "Optional random value to make the request asynchronous. If specified, a 202 status code will be returned, indicating the request has been queued. Initial request must be xhr",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization members"
          },
          "202": {
            "description": "Request has been queued"
          },
          "403": {
            "description": "Unathorized"
          },
          "404": {
            "description": "Organization could not be found"
          }
        }
      }
    },
    "/organizations/current/idps": {
      "get": {
        "tags": ["OrganizationIdps"],
        "operationId": "getOrganizationIdps",
        "responses": {
          "200": {
            "description": "Organization idps",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationIdp"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Unathorized"
          }
        }
      },
      "post": {
        "tags": ["OrganizationIdps"],
        "operationId": "createOrganizationIdp",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationIdp"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Idp",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationIdp"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized"
          },
          "404": {
            "description": "Idp not found"
          },
          "422": {
            "description": "Errors occured",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_validation_error"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/current/idps/{idpId}": {
      "put": {
        "tags": ["OrganizationIdps"],
        "operationId": "updateOrganizationIdp",
        "parameters": [
          {
            "name": "idpId",
            "in": "path",
            "description": "ID of idp",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationIdp"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Idp",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationIdp"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized"
          },
          "404": {
            "description": "Idp not found"
          },
          "422": {
            "description": "Errors occured",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_validation_error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["OrganizationIdps"],
        "operationId": "deleteOrganizationIdp",
        "parameters": [
          {
            "name": "idpId",
            "in": "path",
            "description": "ID of idp",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "403": {
            "description": "Unathorized"
          },
          "404": {
            "description": "Idp not found"
          }
        }
      }
    },
    "/organizations/current/idps/{idpId}/enabled": {
      "put": {
        "tags": ["OrganizationIdps"],
        "description": "Update idp status (enabled)",
        "operationId": "updateOrganizationIdpStatus",
        "parameters": [
          {
            "name": "idpId",
            "in": "path",
            "description": "ID of idp",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "enabled": {
                    "title": "enabled",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "no content"
          },
          "403": {
            "description": "Unathorized"
          },
          "404": {
            "description": "Idp not found"
          },
          "422": {
            "description": "Errors occured",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_validation_error"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/current/idpSettings": {
      "get": {
        "tags": ["OrganizationIdps"],
        "operationId": "getOrganizationIdpSettings",
        "responses": {
          "200": {
            "description": "Idp Settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationIdpSettings"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized"
          }
        }
      },
      "put": {
        "tags": ["OrganizationIdps"],
        "operationId": "updateOrganizationIdpSettings",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationIdpSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Idp Settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationIdpSettings"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized"
          }
        }
      }
    },
    "/organizations/current/idpSettings/ssoDomains": {
      "post": {
        "tags": ["OrganizationIdps"],
        "operationId": "addOrganizationSsoDomain",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "domain": {
                    "title": "domain",
                    "type": "string"
                  },
                  "verification_method": {
                    "title": "verification_method",
                    "type": "string",
                    "enum": ["dns", "https"]
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Idp Settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationIdpSettings"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized"
          },
          "422": {
            "description": "Errors occured",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_validation_error"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/current/idpSettings/ssoDomains/{ssoDomain}/verify": {
      "post": {
        "tags": ["OrganizationIdps"],
        "operationId": "verifyOrganizationSsoDomain",
        "parameters": [
          {
            "name": "ssoDomain",
            "in": "path",
            "description": "domain name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "verification result",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "verified": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized"
          },
          "422": {
            "description": "Errors occured",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_validation_error"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/current/idpSettings/ssoDomains/{ssoDomain}": {
      "delete": {
        "tags": ["OrganizationIdps"],
        "operationId": "deleteOrganizationSsoDomain",
        "parameters": [
          {
            "name": "ssoDomain",
            "in": "path",
            "description": "domain name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Idp Settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationIdpSettings"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized"
          },
          "422": {
            "description": "Errors occured",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_validation_error"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/current/idps/{idpId}/oidc/spMetadata": {
      "get": {
        "tags": ["OrganizationIdps"],
        "operationId": "getOIDCSpMetadata",
        "parameters": [
          {
            "name": "idpId",
            "in": "path",
            "description": "ID of idp",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SP oidc metadata",
            "content": {
              "application/json": {
                "schema": {
                  "title": "oidc_sp_metadata",
                  "properties": {
                    "redirectUrl": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized"
          },
          "404": {
            "description": "Idp not found"
          },
          "405": {
            "description": "Idp is not oidc"
          }
        }
      }
    },
    "/organizations/current/idps/{idpId}/oidc/setup": {
      "put": {
        "tags": ["OrganizationIdps"],
        "description": "Update oidc idp metadata",
        "operationId": "updateOIDCIdpMetadata",
        "parameters": [
          {
            "name": "idpId",
            "in": "path",
            "description": "ID of idp",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationIdpOIDCSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Idp",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationIdp"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized"
          },
          "404": {
            "description": "Idp not found"
          },
          "405": {
            "description": "Idp is not oidc"
          },
          "422": {
            "description": "Errors occured",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_validation_error"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/current/idps/{idpId}/saml/spMetadata": {
      "get": {
        "tags": ["OrganizationIdps"],
        "operationId": "getSamlSpMetadata",
        "parameters": [
          {
            "name": "idpId",
            "in": "path",
            "description": "ID of idp",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SP saml metadata",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationIdpSamlMetadata"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized"
          },
          "404": {
            "description": "Idp not found"
          },
          "405": {
            "description": "Idp is not saml"
          }
        }
      }
    },
    "/organizations/{orgId}/idps/{idpId}/saml/spMetadataXml": {
      "get": {
        "tags": ["OrganizationIdps"],
        "operationId": "getSamlSpMetadataXmlLegacy",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "description": "organization id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "idpId",
            "in": "path",
            "description": "ID of idp",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SP saml metadata xml"
          },
          "403": {
            "description": "Unathorized"
          },
          "404": {
            "description": "Idp not found"
          },
          "405": {
            "description": "Idp is not saml"
          }
        }
      }
    },
    "/orgIdp/{idpId}/samlEntityID": {
      "get": {
        "tags": ["OrganizationIdps"],
        "operationId": "getSamlSpMetadataXml",
        "parameters": [
          {
            "name": "idpId",
            "in": "path",
            "description": "ID of idp",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SP saml metadata xml"
          },
          "404": {
            "description": "Idp not found"
          },
          "405": {
            "description": "Idp is not saml"
          }
        }
      }
    },
    "/organizations/current/idps/{idpId}/saml/setup/fromUrl": {
      "put": {
        "tags": ["OrganizationIdps"],
        "description": "Update saml idp metadata: from url pointing to metadata xml",
        "operationId": "updateSamlIdpMetadataFromUrl",
        "parameters": [
          {
            "name": "idpId",
            "in": "path",
            "description": "ID of idp",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "metadataUrl": {
                    "title": "metadataUrl",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Idp",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationIdp"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized"
          },
          "404": {
            "description": "Idp not found"
          },
          "405": {
            "description": "Idp is not saml"
          },
          "422": {
            "description": "Errors occured",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_validation_error"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/current/idps/{idpId}/saml/setup/fromFile": {
      "post": {
        "tags": ["OrganizationIdps"],
        "description": "Update saml idp metadata: from metadata xml file upload",
        "operationId": "updateSamlIdpMetadataFromFile",
        "parameters": [
          {
            "name": "idpId",
            "in": "path",
            "description": "ID of idp",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "metadataXml": {
                    "description": "idp metadata xml file",
                    "type": "string",
                    "format": "binary"
                  },
                  "metadataXmlBase64": {
                    "description": "idp metadata xml file (base64 encoded)",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Idp",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationIdp"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized"
          },
          "404": {
            "description": "Idp not found"
          },
          "405": {
            "description": "Idp is not saml"
          },
          "422": {
            "description": "Errors occured",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_validation_error"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/current/idps/{idpId}/saml/setup/fromParameters": {
      "put": {
        "tags": ["OrganizationIdps"],
        "description": "Update saml idp metadata: from individual parameters",
        "operationId": "updateSamlIdpMetadataFromParameters",
        "parameters": [
          {
            "name": "idpId",
            "in": "path",
            "description": "ID of idp",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationIdpSamlSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Idp",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationIdp"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized"
          },
          "404": {
            "description": "Idp not found"
          },
          "405": {
            "description": "Idp is not saml"
          },
          "422": {
            "description": "Errors occured",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_validation_error"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/current": {
      "get": {
        "tags": ["Organization"],
        "operationId": "getOrganization",
        "responses": {
          "200": {
            "description": "Get Organization Details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized"
          },
          "404": {
            "description": "Organization could not be found"
          }
        }
      },
      "put": {
        "tags": ["Organization"],
        "operationId": "updateOrganization",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Organization"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized"
          },
          "404": {
            "description": "Organization could not be found"
          },
          "422": {
            "description": "Errors occured",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_validation_error"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/current/appsMissingAdmin": {
      "get": {
        "tags": ["Organization"],
        "operationId": "getAppsMissingAdmin",
        "responses": {
          "200": {
            "description": "Get Organization Details",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "title": "result set",
                      "type": "array",
                      "items": {
                        "properties": {
                          "apps": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "example": "formstack_classic"
                            }
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized"
          },
          "404": {
            "description": "Organization could not be found"
          }
        }
      }
    },
    "/organizations/current/logo/new": {
      "get": {
        "tags": ["Organization"],
        "operationId": "organizationGenerateSignedFileUploadGrant",
        "responses": {
          "200": {
            "description": "Details to be used in a form to upload image to",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignedFileUploadGrant"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized"
          }
        }
      }
    },
    "/organizations/current/productTrial/{productId}": {
      "post": {
        "tags": ["Organization"],
        "operationId": "requestProductTrial",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "product id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "needs_approval",
                        "processing",
                        "existing_app_membership"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized"
          },
          "422": {
            "description": "Errors occured",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_validation_error"
                }
              }
            }
          }
        }
      }
    },
    "/organizations/current/productTrialStatus": {
      "get": {
        "tags": ["Organization"],
        "description": "Poll for status of recent product trial requests",
        "operationId": "checkTrialRequestFulfilled",
        "responses": {
          "200": {
            "description": "fulfilled state",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "fulfilled": {
                        "type": "boolean"
                      },
                      "product_id": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Unathorized"
          },
          "404": {
            "description": "Organization or request could not be found"
          }
        }
      }
    },
    "/organizations/current/applicationsProvisionedStatus": {
      "get": {
        "tags": ["Organization"],
        "description": "Poll for applications provisioned status (when org has fsid managed billing)",
        "operationId": "checkApplicationsProvisionedStatus",
        "responses": {
          "200": {
            "description": "fulfilled state",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "fulfilled": {
                        "type": "boolean"
                      },
                      "product_id": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Unathorized"
          },
          "404": {
            "description": "Organization or request could not be found"
          }
        }
      }
    },
    "/personalAccessTokens": {
      "get": {
        "tags": ["PersonalAccessTokens"],
        "operationId": "personalAccessTokensList",
        "responses": {
          "200": {
            "description": "List of personal access tokens",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PersonalAccessToken"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": ["PersonalAccessTokens"],
        "operationId": "personalAccessTokenAdd",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonalAccessToken"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalAccessToken"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Cannot add personal access token"
          }
        }
      }
    },
    "/personalAccessTokens/{id}": {
      "put": {
        "tags": ["PersonalAccessTokens"],
        "description": "Update personal access token",
        "operationId": "personalAccessTokenUpdate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of token",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonalAccessToken"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated personal access token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalAccessToken"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Personal access token not found"
          }
        }
      },
      "delete": {
        "tags": ["PersonalAccessTokens"],
        "description": "Revoke personal access token",
        "operationId": "personalAccessTokenRevoke",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of key",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated personal access token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalAccessToken"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Api key not found"
          }
        }
      }
    },
    "/personalAccessTokens/{id}/regenerate": {
      "post": {
        "tags": ["PersonalAccessTokens"],
        "description": "Regenerate personal access token",
        "operationId": "personalAccessTokenRegenerate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of key",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "regenerate_personal_access_token_payload",
                "properties": {
                  "duration": {
                    "enum": ["30 days", "60 days", "90 days"],
                    "writeOnly": true,
                    "nullable": true
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated personal access token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalAccessToken"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Api key not found"
          }
        }
      }
    },
    "/organizations/current/productPermissions/{productId}/{membershipId}": {
      "get": {
        "tags": ["ProductPermissions"],
        "description": "Get current product permissions for a given user",
        "operationId": "getCurrentProductPermissionsForUser",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "Product id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "membershipId",
            "in": "path",
            "description": "ID of membership",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product permissions as returned by product",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/organizations/current/productPermissionsConfig/{productId}": {
      "get": {
        "tags": ["ProductPermissions"],
        "description": "Get product permissions config",
        "operationId": "getProductPermissionsConfig",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "Product id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "params",
            "in": "query",
            "description": "extra params to pass for product",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product permissions as returned by product",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/flag/{flag}": {
      "get": {
        "tags": ["ReleaseFlag"],
        "operationId": "getFlagStatus",
        "parameters": [
          {
            "name": "flag",
            "in": "path",
            "description": "Flag name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Release Flag Information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseFlag"
                }
              }
            }
          }
        }
      }
    },
    "/subaccounts": {
      "get": {
        "tags": ["Subaccounts"],
        "operationId": "subaccountListing",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Filter by subaccount name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "products[]",
            "in": "query",
            "description": "Filter by products",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "formstack_classic"
              }
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "perPage",
            "in": "query",
            "description": "Per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "enum": [10, 25, 50]
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Order by",
            "required": false,
            "schema": {
              "type": "string",
              "default": "createdAt",
              "enum": ["name", "createdAt", "isSuspended"]
            }
          },
          {
            "name": "orderDir",
            "in": "query",
            "description": "Order dir",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["asc", "desc"]
            }
          },
          {
            "name": "includeBilling",
            "in": "query",
            "description": "Include Billing",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subaccount listing results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subaccount"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized"
          }
        }
      }
    },
    "/subaccounts/check-email-availability": {
      "post": {
        "tags": ["Subaccounts"],
        "operationId": "subaccountCheckEmailAvailability",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subaccount was created",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "available": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/subaccounts/partnerSupportRequest": {
      "post": {
        "tags": ["Subaccounts"],
        "operationId": "sendPartnerSupportRequest",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "reason": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Support request was sent"
          }
        }
      }
    },
    "/subaccounts/csv": {
      "get": {
        "tags": ["Subaccounts"],
        "description": "Export organization members as csv attachment",
        "operationId": "exportSubaccounts",
        "parameters": [
          {
            "name": "_async_web_request_id",
            "in": "query",
            "description": "Optional random value to make the request asynchronous. If specified, a 202 status code will be returned, indicating the request has been queued. Initial request must be xhr",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subaccounts"
          },
          "202": {
            "description": "Request has been queued"
          },
          "403": {
            "description": "Unathorized"
          },
          "404": {
            "description": "Organization could not be found"
          }
        }
      }
    },
    "/users/current": {
      "get": {
        "tags": ["User"],
        "operationId": "getCurrentUser",
        "responses": {
          "200": {
            "description": "Get currently authenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["User"],
        "operationId": "updateCurrent",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update currently authenticated user info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/users/current/password": {
      "put": {
        "tags": ["User"],
        "operationId": "changeCurrentUserPassword",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "currentPassword": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "passwordConfirmation": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "422": {
            "description": "Errors occured",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_validation_error"
                }
              }
            }
          }
        }
      }
    },
    "/users/current/avatar/new": {
      "get": {
        "tags": ["User"],
        "operationId": "generateSignedFileUploadGrant",
        "responses": {
          "200": {
            "description": "Details to be used in a form to upload image to",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignedFileUploadGrant"
                }
              }
            }
          },
          "403": {
            "description": "Unathorized"
          }
        }
      }
    },
    "/users/current/second-factors/backup-codes": {
      "get": {
        "tags": ["User"],
        "description": "Return user's 2fa backup codes",
        "operationId": "getBackupCodes",
        "responses": {
          "200": {
            "description": "Backup codes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "405": {
            "description": "Not allowed for current user"
          }
        }
      },
      "post": {
        "tags": ["User"],
        "description": "Regenerate user's 2fa backup codes",
        "operationId": "regenerateBackupCodes",
        "responses": {
          "200": {
            "description": "Backup codes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "405": {
            "description": "Not allowed for current user"
          },
          "422": {
            "description": "Errors occured",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_validation_error"
                }
              }
            }
          }
        }
      }
    },
    "/users/current/second-factors/backup-codes/as-file": {
      "get": {
        "tags": ["User"],
        "description": "Return user's 2fa backup codes as csv attachment",
        "operationId": "getBackupCodesAsFile",
        "responses": {
          "200": {
            "description": "Backup codes"
          },
          "405": {
            "description": "Not allowed for current user"
          },
          "422": {
            "description": "Errors occured",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_validation_error"
                }
              }
            }
          }
        }
      }
    },
    "/users/current/second-factors": {
      "post": {
        "tags": ["User"],
        "description": "Setup new primary 2fa device (sms or phone)",
        "operationId": "setupNewSecondFactorsDevice",
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "primaryPhone": {
                    "type": "string",
                    "nullable": true
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Empty response for sms and QR url for app",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "provisioningUri": {
                      "type": "string",
                      "nullable": true
                    },
                    "secret": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Errors occured",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_validation_error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["User"],
        "description": "Remove user's 2fa",
        "operationId": "deleteSecondFactors",
        "responses": {
          "204": {
            "description": "No Content"
          },
          "422": {
            "description": "Errors occured",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_validation_error"
                }
              }
            }
          }
        }
      }
    },
    "/users/current/second-factors/complete": {
      "post": {
        "tags": ["User"],
        "description": "Complete setup new primary 2fa device",
        "operationId": "completeSetupNewSecondFactorsDevice",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "confirmCode": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Newly created second factors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthSecondFactors"
                }
              }
            }
          },
          "405": {
            "description": "Device setup not started"
          },
          "422": {
            "description": "Errors occured",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/general_validation_error"
                }
              }
            }
          }
        }
      }
    },
    "/users/current/second-factors/backup-phone": {
      "put": {
        "tags": ["User"],
        "description": "Change backup phone number",
        "operationId": "updateSecondFactorsBackupPhone",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "backupPhone": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "405": {
            "description": "Not allowed for current user"
          },
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/users/current/second-factors/unsupported-countries": {
      "get": {
        "tags": ["User"],
        "description": "Return countries we are not able to send SMS based 2FA",
        "operationId": "getUnsupportedCountries",
        "responses": {
          "200": {
            "description": "Get list of countries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "name": {
                        "type": "string",
                        "example": "France"
                      },
                      "iso": {
                        "type": "string",
                        "example": "FR"
                      }
                    },
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/salesAndMarketing/cancelationSurveyDiscount": {
      "post": {
        "tags": ["SalesAndMarketing"],
        "operationId": "cancelationSurveyDiscount",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "product": {
                    "type": "string",
                    "example": "productId"
                  },
                  "email": {
                    "type": "string",
                    "example": "useraccount@company.com"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Request has been sent to support"
          },
          "403": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/signup/check-email-availability": {
      "post": {
        "tags": ["Signup"],
        "operationId": "signupCheckEmailAvailability",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "recaptchaToken": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Is email available response",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "available": {
                      "description": "Is the email available",
                      "type": "boolean",
                      "example": "false"
                    },
                    "reasonCode": {
                      "description": "If not available the reason why: user_exists or invitation_exists",
                      "type": "string",
                      "example": "user_exists"
                    }
                  },
                  "type": "object"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AutoUpgradeChangePreview": {
        "properties": {
          "baseCount": {
            "type": "integer",
            "example": "250"
          },
          "feature": {
            "type": "string",
            "example": "merges"
          },
          "autoUpgradeCount": {
            "type": "integer",
            "example": "75"
          },
          "autoUpgradeDetail": {
            "type": "string",
            "example": "Auto Upgrade Usage: Merges (pack of 75) x 1"
          },
          "price": {
            "type": "string",
            "example": "$50 per month"
          },
          "totalCount": {
            "type": "integer",
            "example": "325"
          }
        },
        "type": "object"
      },
      "OrganizationBillingAddress": {
        "properties": {
          "address1": {
            "description": "Address 1",
            "example": "1 bill lane"
          },
          "address2": {
            "description": "Address 2",
            "example": "somewhere"
          },
          "city": {
            "description": "City",
            "example": "Indianapolis"
          },
          "country": {
            "description": "Country",
            "example": "US"
          },
          "state": {
            "description": "State",
            "example": "IN"
          },
          "zip": {
            "description": "Zip or Postal Code",
            "type": "string",
            "example": "90210"
          }
        },
        "type": "object"
      },
      "BillingChangePreview": {
        "properties": {
          "immediateCharge": {
            "$ref": "#/components/schemas/MoneyAmount"
          },
          "regularCharge": {
            "$ref": "#/components/schemas/MoneyAmount"
          },
          "takesEffectOn": {
            "description": "If the change will take effect at a future date, this will be the date it takes effect",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "type": "object"
      },
      "OrganizationBillingContact": {
        "properties": {
          "email": {
            "description": "Email address",
            "format": "email",
            "example": "test@example.com"
          },
          "firstName": {
            "description": "First Name",
            "example": "John"
          },
          "lastName": {
            "description": "Last Name",
            "example": "Smith"
          },
          "phone": {
            "description": "Phone Number",
            "example": "+1111111111"
          },
          "address": {
            "$ref": "#/components/schemas/OrganizationBillingAddress"
          }
        },
        "type": "object"
      },
      "CancelPlanPreview": {
        "properties": {
          "canDowngradeToFree": {
            "type": "boolean",
            "readOnly": true
          },
          "nextRenewalDate": {
            "description": "If the org is being billed, when will the cancellation happen",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2021-09-07T00:00:00+00:00",
            "nullable": true
          },
          "freePlanFeatureSet": {
            "type": "array",
            "items": {
              "discriminator": {
                "propertyName": "type"
              },
              "oneOf": [
                {
                  "$ref": "#/components/schemas/FormstackClassicFeatureSet"
                },
                {
                  "$ref": "#/components/schemas/WebmergeFeatureSet"
                },
                {
                  "$ref": "#/components/schemas/InsureSignFeatureSet"
                }
              ]
            },
            "nullable": true
          }
        },
        "type": "object"
      },
      "BillingComponentPurchaseOrderForm": {
        "properties": {
          "sections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BillingComponentPurchaseOrderSection"
            }
          }
        },
        "type": "object"
      },
      "BillingComponentPurchaseOrderContactComponent": {
        "properties": {
          "type": {
            "description": "Type of component",
            "type": "string",
            "example": "contact"
          },
          "name": {
            "description": "Product Name",
            "type": "string",
            "example": "Extra widgets"
          },
          "pricingInfo": {
            "description": "Pricing Info",
            "type": "string",
            "example": "$5 each or 10 for $50, bargain!"
          },
          "buttonText": {
            "description": "Button text",
            "type": "string",
            "example": "Contact Us"
          }
        },
        "type": "object"
      },
      "BillingComponentPurchaseOrderQuantityComponent": {
        "properties": {
          "type": {
            "description": "Type of component",
            "type": "string",
            "example": "quantity"
          },
          "handle": {
            "description": "Component handle",
            "type": "string",
            "example": "c:platform-plan-forms-extra-user"
          },
          "name": {
            "description": "Name",
            "type": "string",
            "example": "Forms"
          },
          "value": {
            "description": "How many to purchase",
            "type": "integer"
          },
          "pricingInfo": {
            "description": "Pricing Info",
            "type": "string",
            "example": "$10 per user"
          }
        },
        "type": "object"
      },
      "BillingComponentPurchaseOrderSection": {
        "properties": {
          "sectionKey": {
            "description": "A name for the section",
            "type": "string",
            "example": "Forms"
          },
          "components": {
            "type": "array",
            "items": {
              "discriminator": {
                "propertyName": "type"
              },
              "oneOf": [
                {
                  "$ref": "#/components/schemas/BillingComponentPurchaseOrderQuantityComponent"
                },
                {
                  "$ref": "#/components/schemas/BillingComponentPurchaseOrderContactComponent"
                },
                {
                  "$ref": "#/components/schemas/BillingComponentPurchaseOrderSelectComponent"
                }
              ]
            }
          }
        },
        "type": "object"
      },
      "BillingComponentPurchaseOrderSelectComponent": {
        "properties": {
          "type": {
            "description": "Type of component",
            "type": "string",
            "example": "select"
          },
          "name": {
            "description": "Name",
            "type": "string",
            "example": "Forms"
          },
          "pricingInfo": {
            "description": "Pricing Info",
            "type": "string",
            "example": "$10 per user"
          },
          "value": {
            "description": "A component handle followed by a colon and a quantity of that handle",
            "type": "string",
            "example": "c:100-pack-of-things:1"
          },
          "options": {
            "type": "array",
            "items": {
              "properties": {
                "value": {
                  "description": "Component handle",
                  "type": "string",
                  "example": "c:100-pack-of-things"
                },
                "label": {
                  "type": "string",
                  "example": "100 of them"
                }
              },
              "type": "object"
            }
          }
        },
        "type": "object"
      },
      "Discount": {
        "properties": {
          "name": {
            "description": "Discount name",
            "type": "string",
            "readOnly": true,
            "example": "Non Profit",
            "nullable": true
          },
          "handle": {
            "description": "Discount product handle",
            "type": "string",
            "readOnly": true,
            "example": "d:non-profit",
            "nullable": true
          },
          "percentage": {
            "description": "Discount percentage that this org receieves discounts for any subaccount it sells",
            "type": "integer",
            "readOnly": true,
            "example": "10"
          },
          "saving": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/MoneyAmount"
              }
            ],
            "nullable": true,
            "description": "Amount Saved having discounts",
            "readOnly": true
          }
        },
        "type": "object"
      },
      "DobbyFeatureSet": {
        "properties": {
          "maxWorkspaceUsers": {
            "type": "integer"
          },
          "workspace": {
            "type": "boolean"
          },
          "conditionalLogic": {
            "type": "boolean"
          },
          "approvals": {
            "type": "boolean"
          },
          "apiConnector": {
            "type": "boolean"
          }
        },
        "type": "object",
        "readOnly": true,
        "additionalProperties": true
      },
      "FormstackClassicFeatureSet": {
        "properties": {
          "mvpPlan": {
            "type": "string"
          },
          "maxUsers": {
            "type": "integer"
          },
          "maxForms": {
            "type": "integer"
          },
          "maxSubmissions": {
            "type": "integer"
          },
          "maxAnalystUsers": {
            "type": "integer"
          },
          "maxParticipantUsers": {
            "description": "treat null as INF",
            "type": "integer",
            "nullable": true
          },
          "canAddParticipantUsers": {
            "type": "boolean"
          },
          "maxPortalUsers": {
            "type": "integer"
          },
          "formIdp": {
            "type": "boolean"
          },
          "portals": {
            "type": "boolean"
          },
          "workflows": {
            "type": "boolean"
          },
          "gaPlugin": {
            "type": "boolean"
          },
          "bottlenecks": {
            "type": "boolean"
          },
          "formAbTesting": {
            "description": "deprecated",
            "type": "boolean"
          },
          "utmTracking": {
            "type": "boolean"
          },
          "fieldAutoCapture": {
            "type": "boolean"
          },
          "siteTracking": {
            "type": "boolean"
          },
          "prefillMapping": {
            "type": "boolean"
          },
          "maxStorage": {
            "type": "integer"
          },
          "api": {
            "type": "boolean"
          },
          "maxApiCallsPerDay": {
            "type": "integer"
          },
          "dataEncryption": {
            "type": "boolean"
          },
          "approvals": {
            "type": "boolean"
          },
          "smartLists": {
            "type": "boolean"
          },
          "advancedPdf": {
            "type": "boolean"
          },
          "salesforce": {
            "type": "boolean"
          },
          "formV4AdvancedHtml": {
            "type": "boolean"
          },
          "applicationAccess": {
            "type": "boolean"
          },
          "dataSecurity": {
            "type": "boolean"
          },
          "webhooksForHipaa": {
            "type": "boolean"
          },
          "ai": {
            "type": "boolean"
          }
        },
        "type": "object",
        "readOnly": true,
        "additionalProperties": true
      },
      "InsureSignFeatureSet": {
        "properties": {
          "mvpPlan": {
            "type": "string"
          },
          "maxUsers": {
            "type": "integer"
          },
          "api": {
            "type": "boolean"
          },
          "applicationAccess": {
            "type": "boolean"
          },
          "integrations": {
            "type": "boolean"
          }
        },
        "type": "object",
        "readOnly": true,
        "additionalProperties": true
      },
      "Invoice": {
        "properties": {
          "id": {
            "type": "string",
            "example": "INV123"
          },
          "amount": {
            "$ref": "#/components/schemas/MoneyAmount"
          },
          "dueDate": {
            "type": "string",
            "example": "2020-09-08"
          },
          "invoiceDate": {
            "type": "string",
            "example": "2020-09-08"
          },
          "status": {
            "type": "string",
            "enum": ["paid", "unpaid", "cancelled"]
          },
          "title": {
            "type": "string",
            "example": "Platform Starter - Monthly Charge"
          },
          "href": {
            "description": "URL that will download a PDF of the invoice",
            "type": "string",
            "example": "https://admin.dev-formstack.com:8085/api/v1/billing/invoices/INV123"
          }
        },
        "type": "object",
        "readOnly": true
      },
      "MoneyAmount": {
        "properties": {
          "amount": {
            "description": "amount in cents/smallest monetary unit for a currency",
            "type": "string",
            "example": "4200"
          },
          "currency": {
            "type": "string",
            "example": "USD"
          },
          "formatted": {
            "type": "string",
            "example": "$400.00"
          }
        },
        "type": "object",
        "readOnly": true
      },
      "OrganizationBillingDetailsPaymentMethodCreditCard": {
        "properties": {
          "type": {
            "description": "payment method type",
            "example": "CreditCard"
          },
          "maskedNumber": {
            "description": "Masked credit card number",
            "example": "************1111"
          },
          "expirationMonth": {
            "description": "Month in which the credit card expires",
            "example": "01"
          },
          "expirationYear": {
            "description": "Year in which the credit card expires",
            "example": "06"
          },
          "cardType": {
            "example": "Visa"
          }
        },
        "type": "object"
      },
      "OrganizationBillingDetailsPaymentMethodCheck": {
        "properties": {
          "type": {
            "description": "payment method type",
            "example": "NonCreditCard"
          },
          "name": {
            "description": "Name that describes the payment method such as Check, or ACH",
            "example": "Check"
          }
        },
        "type": "object"
      },
      "OrganizationBillingDetails": {
        "properties": {
          "periodicity": {
            "description": "Billing periodicity",
            "type": "string",
            "enum": [
              "monthly",
              "yearly",
              "quarterly",
              "semi_annual",
              "two_yearly",
              "three_yearly"
            ],
            "readOnly": true,
            "example": "monthly"
          },
          "amount": {
            "$ref": "#/components/schemas/MoneyAmount"
          },
          "nextBillDate": {
            "description": "If the org is being billed, when will the next payment be taken (user tz)",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2021-09-07T00:00:00+00:00",
            "nullable": true
          },
          "scheduledForCancellationAt": {
            "description": "If the org is currently scheduled for cancellation they will not be able to update any billing (user tz)",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2021-09-07T00:00:00+00:00",
            "nullable": true
          },
          "isSuspended": {
            "description": "Is The org suspended due to non payment",
            "type": "boolean",
            "readOnly": true,
            "nullable": false
          },
          "hasActiveSubscription": {
            "description": "Does the org have a paid active subscription",
            "type": "boolean",
            "readOnly": true,
            "nullable": false
          },
          "payedForAppsOnPreviousSubscription": {
            "description": "When org doesn't have active subscription, did they paid for apps in the past",
            "type": "boolean",
            "readOnly": true,
            "nullable": true
          },
          "isSubaccountComped": {
            "description": "Is this subaccount comped (likely pays for themselves)",
            "type": "boolean",
            "readOnly": true,
            "nullable": true
          },
          "paymentMethod": {
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "CreditCard": "#/components/schemas/OrganizationBillingDetailsPaymentMethodCreditCard",
                "NonCreditCard": "#/components/schemas/OrganizationBillingDetailsPaymentMethodCheck"
              }
            },
            "readOnly": true,
            "example": {
              "type": "NonCreditCard",
              "name": "ACH"
            },
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/OrganizationBillingDetailsPaymentMethodCreditCard"
              },
              {
                "$ref": "#/components/schemas/OrganizationBillingDetailsPaymentMethodCheck"
              }
            ]
          },
          "canUpdateCardDetails": {
            "description": "Allow updating/setting card details",
            "type": "boolean",
            "readOnly": true,
            "example": "false"
          },
          "resellerStatus": {
            "$ref": "#/components/schemas/ResellerStatus"
          },
          "contact": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/OrganizationBillingContact"
              }
            ],
            "nullable": true
          },
          "overview": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/OrganizationBillingOverview"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "discount": {
            "$ref": "#/components/schemas/Discount"
          }
        },
        "type": "object"
      },
      "OrganizationBillingOverview": {
        "title": "View data for billing overview section",
        "properties": {
          "planNames": {
            "title": "plan names",
            "type": "array",
            "items": {
              "type": "string",
              "example": "Forms Pro"
            }
          },
          "apps": {
            "title": "apps",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationBillingOverviewApp"
            }
          },
          "plans": {
            "title": "plans",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationBillingOverviewPlan"
            }
          },
          "showPurchasePlan": {
            "title": "showPurchasePlan",
            "type": "boolean"
          },
          "showPurchasePlanExtrasButton": {
            "title": "showPurchasePlanExtrasButton",
            "type": "boolean"
          },
          "canHaveAutoUpgrade": {
            "title": "canHaveAutoUpgrade",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "OrganizationBillingOverviewApp": {
        "properties": {
          "applicationKey": {
            "description": "Key to identify the application",
            "type": "string",
            "example": "formstack_classic"
          },
          "features": {
            "title": "features",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationBillingOverviewFeature"
            }
          },
          "autoUpgradeOptions": {
            "title": "autoUpgrade",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationBillingOverviewAutoUpgrade"
            }
          },
          "usages": {
            "title": "usages",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationBillingOverviewUsage"
            }
          },
          "usageLastUpdatedAt": {
            "description": "date when usages for application was last updated(in user tz)",
            "type": "string",
            "format": "date",
            "example": "2022-11-14T17:00:50-05:00",
            "nullable": true
          }
        },
        "type": "object"
      },
      "OrganizationBillingOverviewAutoUpgrade": {
        "properties": {
          "enabled": {
            "description": "Is this Auto Upgrade feature enabled",
            "type": "boolean",
            "example": "true"
          },
          "enabledChangedAt": {
            "description": "date when enabled was last changed(in user tz)",
            "type": "string",
            "format": "date",
            "example": "2022-11-14T17:00:50-05:00",
            "nullable": true
          },
          "autoUpgradeFeature": {
            "description": "Name of auto upgrade feature",
            "type": "string",
            "example": "merge"
          },
          "handle": {
            "description": "Handle of auto upgrade component",
            "type": "string",
            "example": "c:docs-flex-150-merges"
          },
          "name": {
            "description": "Name of the auto upgrade component",
            "type": "string",
            "example": "Docs: Auto Upgrade Merge pack of 150 merges"
          },
          "price": {
            "description": "Expected price for the renewed auto upgrade components",
            "type": "string",
            "example": "$80.00"
          },
          "quantity": {
            "description": "Quantity of auto upgrade components currently purchased",
            "type": "integer",
            "example": "4"
          },
          "renewalQuantity": {
            "description": "Quantity of auto upgrade components that will renew next bill period",
            "type": "integer",
            "example": "4"
          },
          "features": {
            "description": "Featureset this auto upgrade component gives access to",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "canDowngrade": {
            "description": "Whether org can remove/downgrade auto-upgrade packs",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "OrganizationBillingOverviewFeature": {
        "properties": {
          "label": {
            "description": "Text for the feature",
            "type": "string",
            "example": "Users"
          },
          "value": {
            "description": "Value for the feature. Can either be textual representation of a number or boolean to determine whether to show tick or not",
            "example": "1,000"
          },
          "trialExpDate": {
            "description": "Date the base plan trial expires if trialing",
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "icon": {
            "description": "What icon to display",
            "type": "string",
            "enum": ["tick", "plus"],
            "example": "tick"
          },
          "onClick": {
            "description": "What to do when clicked",
            "type": "string",
            "enum": [null, "open_usages_dialog"],
            "example": "open_usages_dialog",
            "nullable": true
          },
          "notice": {
            "description": "Used currently to show docs auto charge state",
            "properties": {
              "label": {
                "type": "string",
                "example": "Auto upgrade: on"
              },
              "tooltip": {
                "type": "string",
                "example": "We will auto upgrade you when you go over your limits"
              }
            },
            "type": "object",
            "nullable": true
          }
        },
        "type": "object"
      },
      "OrganizationBillingOverviewPlan": {
        "properties": {
          "planName": {
            "description": "Plan name",
            "type": "string",
            "example": "Forms Teams"
          },
          "familyKey": {
            "description": "Plan family key",
            "type": "string",
            "example": "formstack_classic"
          },
          "trialExpDate": {
            "description": "Date the base plan trial expires if trialing",
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "scheduledForChangeAtPillText": {
            "description": "If set, the date of which this app will be removed/downgraded to free",
            "type": "string",
            "format": "string",
            "nullable": true
          }
        },
        "type": "object"
      },
      "OrganizationBillingOverviewUsage": {
        "properties": {
          "label": {
            "description": "Text for the feature",
            "type": "string",
            "example": "Users"
          },
          "current": {
            "description": "current usage value for the feature",
            "type": "integer",
            "example": 2
          },
          "currentFormatted": {
            "description": "current usage formatted (optional)",
            "type": "string",
            "example": "512M",
            "nullable": true
          },
          "limit": {
            "description": "maximum usage value for the feature",
            "type": "integer",
            "example": 10
          },
          "limitFormatted": {
            "description": "limit formatted (optional)",
            "type": "string",
            "example": "3G",
            "nullable": true
          },
          "warningMessage": {
            "description": "Warning message",
            "type": "string",
            "example": "Nearing monthly limit"
          },
          "validUntil": {
            "description": "Usage valid until",
            "type": "string",
            "example": "6 days 20 hours",
            "nullable": true
          }
        },
        "type": "object"
      },
      "ResellerStatus": {
        "properties": {
          "isReseller": {
            "description": "Is this organization a reseller",
            "type": "boolean",
            "readOnly": true,
            "example": "true"
          },
          "discountTierName": {
            "description": "Tier name that this org receieves discounts for any subaccount it sells",
            "type": "string",
            "readOnly": true,
            "example": "gold",
            "nullable": true
          },
          "discountTierPercentage": {
            "description": "Tier percentage that this org receieves discounts for any subaccount it sells",
            "type": "integer",
            "readOnly": true,
            "example": "10"
          },
          "discountTierLastChanged": {
            "description": "When the reseller tier was last changed",
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2021-09-07T00:00:00+00:00",
            "nullable": true
          }
        },
        "type": "object"
      },
      "CreateSubaccountPreview": {
        "properties": {
          "immediateCharge": {
            "$ref": "#/components/schemas/MoneyAmount"
          },
          "regularCharge": {
            "$ref": "#/components/schemas/MoneyAmount"
          },
          "resellerStatus": {
            "$ref": "#/components/schemas/ResellerStatus"
          },
          "paymentMethod": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/OrganizationBillingDetailsPaymentMethodCreditCard"
              },
              {
                "$ref": "#/components/schemas/OrganizationBillingDetailsPaymentMethodCheck"
              }
            ]
          }
        },
        "type": "object"
      },
      "CreateSubaccountRequest": {
        "required": [
          "orgName",
          "email",
          "firstName",
          "lastName",
          "hipaa",
          "productHandles"
        ],
        "properties": {
          "orgName": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "logoBase64": {
            "description": "Optional logo which should be base64 encoded data urls https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs",
            "type": "string"
          },
          "periodicity": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "WebmergeFeatureSet": {
        "properties": {
          "mvpPlan": {
            "type": "string"
          },
          "maxUsers": {
            "type": "integer"
          },
          "maxMerges": {
            "type": "integer"
          },
          "maxTestMerges": {
            "type": "integer"
          },
          "maxDocuments": {
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ]
          },
          "dataRouting": {
            "type": "boolean"
          },
          "api": {
            "type": "boolean"
          },
          "salesforceDelivery": {
            "type": "boolean"
          },
          "docsForSalesforce": {
            "type": "boolean"
          },
          "thirdPartyDelivery": {
            "type": "boolean"
          },
          "applicationAccess": {
            "type": "boolean"
          },
          "dataSecurity": {
            "type": "boolean"
          }
        },
        "type": "object",
        "readOnly": true,
        "additionalProperties": true
      },
      "HomepageWidgets": {
        "properties": {
          "widgets": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/HomepageQuickPathWidget"
                },
                {
                  "$ref": "#/components/schemas/HomepageUsersWidget"
                },
                {
                  "$ref": "#/components/schemas/HomepageBillingWidget"
                }
              ]
            },
            "readOnly": true
          }
        },
        "type": "object"
      },
      "HomepageQuickPath": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "isPinned": {
            "type": "boolean"
          },
          "urlType": {
            "type": "string",
            "enum": [
              "formstack_classic",
              "webmerge",
              "insuresign",
              "dobby",
              "external"
            ],
            "readOnly": true
          }
        },
        "type": "object"
      },
      "HomepageRecommendation": {
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "HomepageAppUsageWidget": {
        "properties": {
          "type": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationBillingOverviewApp"
            },
            "readOnly": true
          }
        },
        "type": "object"
      },
      "HomepageBillingWidget": {
        "properties": {
          "type": {
            "type": "string"
          },
          "data": {
            "properties": {
              "totalCost": {
                "$ref": "#/components/schemas/MoneyAmount"
              },
              "plansCost": {
                "$ref": "#/components/schemas/MoneyAmount"
              },
              "addonsCost": {
                "$ref": "#/components/schemas/MoneyAmount"
              },
              "extrasCost": {
                "$ref": "#/components/schemas/MoneyAmount"
              },
              "nextBillDate": {
                "description": "If the org is being billed, when will the next payment be taken (user tz)",
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "example": "2021-09-07T00:00:00+00:00",
                "nullable": true
              },
              "trialExpDate": {
                "description": "If the org is trialling, when will the trial end (user tz)",
                "type": "string",
                "format": "date-time",
                "readOnly": true,
                "example": "2021-09-07T00:00:00+00:00",
                "nullable": true
              },
              "isPlatformPlan": {
                "description": "If the org has a holding of any suite plans",
                "type": "boolean",
                "readOnly": true,
                "example": "true",
                "nullable": true
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "HomepageQuickPathWidget": {
        "properties": {
          "type": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HomepageQuickPath"
            },
            "readOnly": true
          }
        },
        "type": "object"
      },
      "HomepageRecommendationsWidget": {
        "properties": {
          "type": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HomepageRecommendation"
            },
            "readOnly": true
          }
        },
        "type": "object"
      },
      "HomepageUsersWidget": {
        "properties": {
          "type": {
            "type": "string"
          },
          "data": {
            "properties": {
              "organization": {
                "properties": {
                  "pendingInvitations": {
                    "type": "integer"
                  },
                  "admin": {
                    "type": "integer"
                  },
                  "basic": {
                    "type": "integer"
                  },
                  "total": {
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "formstack_classic": {
                "properties": {
                  "x": {
                    "description": "setting name",
                    "properties": {
                      "count": {
                        "type": "integer"
                      },
                      "limit": {
                        "type": "integer",
                        "nullable": true
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "webmerge": {
                "properties": {
                  "x": {
                    "description": "setting name",
                    "properties": {
                      "count": {
                        "type": "integer"
                      },
                      "limit": {
                        "type": "integer",
                        "nullable": true
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "dobby": {
                "properties": {
                  "x": {
                    "description": "setting name",
                    "properties": {
                      "count": {
                        "type": "integer"
                      },
                      "limit": {
                        "type": "integer",
                        "nullable": true
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "summary": {
                "$ref": "#/components/schemas/MembershipsSummary"
              }
            },
            "type": "object",
            "readOnly": true
          }
        },
        "type": "object"
      },
      "general_validation_error": {
        "properties": {
          "message": {
            "description": "Basic error description",
            "type": "string",
            "example": "The given data failed to pass validation."
          },
          "errors": {
            "description": "Basic error description",
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "cannot be blank"
              }
            }
          }
        },
        "type": "object"
      },
      "AppLastLogin": {
        "properties": {
          "productId": {
            "description": "Product",
            "type": "string",
            "readOnly": true,
            "example": "formstack_classic"
          },
          "lastLoginAt": {
            "description": "Y-m-d\\TH:i:sP format",
            "type": "string",
            "readOnly": true,
            "example": "2019-09-01T12:35:30+00:00",
            "nullable": true
          }
        },
        "type": "object"
      },
      "AuthSecondFactors": {
        "properties": {
          "primaryMethod": {
            "description": "Primary 2fa method",
            "type": "string",
            "enum": ["sms", "app"],
            "example": "app"
          },
          "primarySmsNumber": {
            "description": "Primary number",
            "type": "string",
            "nullable": true
          },
          "backupSmsNumber": {
            "description": "Backup number",
            "type": "string",
            "nullable": true
          }
        },
        "type": "object"
      },
      "BulkInvitePreview": {
        "properties": {
          "inviteesCount": {
            "type": "integer",
            "readOnly": true
          },
          "organizationUserLimits": {
            "description": "Org user limits",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationProductUserLimits"
            },
            "readOnly": true
          }
        },
        "type": "object"
      },
      "BulkInviteResult": {
        "properties": {
          "inviteesCount": {
            "type": "integer",
            "readOnly": true
          },
          "failedCount": {
            "type": "integer",
            "readOnly": true
          },
          "failedEmails": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "readOnly": true
          },
          "failedExistingOrgMembership": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "readOnly": true
          },
          "failedAppAccessViaOtherOrg": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "readOnly": true
          },
          "organizationUserLimits": {
            "description": "Org user limits",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationProductUserLimits"
            },
            "readOnly": true
          }
        },
        "type": "object"
      },
      "FormsAutoDeleteSubmissionsSettings": {
        "title": "Auto Delete Submissions Settings",
        "description": "Settings configuration for automatic deletion of form submissions"
      },
      "Group": {
        "properties": {
          "id": {
            "description": "ID of group",
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "name": {
            "description": "Name of group",
            "type": "string"
          },
          "description": {
            "description": "Description of group",
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date",
            "readOnly": true,
            "example": "2022-11-14T17:00:50-05:00",
            "nullable": false
          },
          "updatedAt": {
            "type": "string",
            "format": "date",
            "readOnly": true,
            "example": "2022-11-14T17:00:50-05:00",
            "nullable": false
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "user@example.com",
            "nullable": true
          },
          "updatedBy": {
            "type": "string",
            "readOnly": true,
            "example": "user@example.com",
            "nullable": true
          },
          "membersCount": {
            "description": "Number of members",
            "type": "integer",
            "readOnly": true,
            "example": 3,
            "nullable": true
          },
          "canAddMembers": {
            "description": "whether you can add more members to this group",
            "properties": {
              "allowed": {
                "type": "boolean"
              },
              "reason": {
                "type": "string",
                "nullable": true
              }
            },
            "type": "object",
            "readOnly": true
          },
          "appRoles": {
            "title": "app roles for new users(key-label pairs)",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "type": "object"
      },
      "Invitation": {
        "properties": {
          "id": {
            "description": "ID",
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "email": {
            "description": "Email",
            "type": "string",
            "example": "john@doe.com"
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "avatarUrl": {
            "description": "Gravatar url",
            "type": "string",
            "readOnly": true,
            "example": "https://example.com/logo.png",
            "nullable": true
          },
          "productMetadata": {
            "description": "Product permissions json",
            "type": "object",
            "writeOnly": true,
            "example": {
              "formstack_classic": [],
              "webmerge": []
            },
            "nullable": true
          }
        },
        "type": "object"
      },
      "Membership": {
        "properties": {
          "id": {
            "description": "ID of membership",
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "productRoles": {
            "description": "Roles",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductRole"
            }
          },
          "reassignAppAdminRolesTo": {
            "description": "If unsetting/removing admin role for any app, provide another user to reassign admin role to",
            "type": "array",
            "items": {
              "properties": {
                "productId": {
                  "description": "app id",
                  "type": "string",
                  "enum": [
                    "organization",
                    "formstack_classic",
                    "webmerge",
                    "insure_sign"
                  ]
                },
                "membershipId": {
                  "description": "Id of member to reassign admin role to",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "writeOnly": true,
            "nullable": true
          },
          "organizationRole": {
            "description": "Organization role",
            "type": "string",
            "example": "basic"
          },
          "organization": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Organization"
              }
            ],
            "nullable": true,
            "description": "Organization",
            "readOnly": true
          },
          "member": {
            "description": "Member (User or Invitation)",
            "properties": {
              "lastLoginAt": {
                "description": "Y-m-d\\TH:i:sP format",
                "type": "string",
                "readOnly": true,
                "example": "2019-09-01T12:35:30+00:00",
                "nullable": true
              }
            },
            "type": "object",
            "readOnly": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/User"
              },
              {
                "$ref": "#/components/schemas/Invitation"
              }
            ]
          },
          "survey": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/MembershipSurvey"
              }
            ],
            "nullable": true,
            "description": "Membership survey"
          },
          "impersonationConsent": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/MembershipImpersonationConsent"
              }
            ],
            "nullable": true,
            "description": "Membership impersonation consent"
          },
          "permissions": {
            "description": "User permissions in the org",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permission"
            },
            "readOnly": true,
            "nullable": true
          }
        },
        "type": "object"
      },
      "MembershipImpersonationConsent": {
        "properties": {
          "grantedAt": {
            "description": "date when impersonation consent was granted (in user tz)",
            "type": "string",
            "format": "date",
            "example": "2022-11-14T17:00:50-05:00"
          },
          "expiresAt": {
            "description": "date when impersonation consent will be expired(in user tz)",
            "type": "string",
            "format": "date",
            "example": "2022-11-14T17:00:50-05:00"
          },
          "revokedAt": {
            "description": "date when impersonation consent was revoked(in user tz)",
            "type": "string",
            "format": "date",
            "example": "2022-11-14T17:00:50-05:00",
            "nullable": true
          }
        },
        "type": "object"
      },
      "MembershipSurvey": {
        "properties": {
          "industry": {
            "type": "string",
            "example": "education",
            "nullable": true
          },
          "industryOther": {
            "type": "string",
            "example": "free text",
            "nullable": true
          },
          "numberOfEmployees": {
            "type": "string",
            "example": "10-99",
            "nullable": true
          },
          "department": {
            "type": "string",
            "example": "sales",
            "nullable": true
          },
          "departmentOther": {
            "type": "string",
            "example": "free text",
            "nullable": true
          },
          "industryOptions": {
            "type": "array",
            "items": {
              "properties": {
                "value": {
                  "type": "string",
                  "example": "education"
                },
                "label": {
                  "type": "string",
                  "example": "Education"
                }
              },
              "type": "object"
            },
            "readOnly": true
          },
          "numberOfEmployeesOptions": {
            "type": "array",
            "items": {
              "properties": {
                "value": {
                  "type": "string",
                  "example": "1-19"
                },
                "label": {
                  "type": "string",
                  "example": "1-19 employees"
                }
              },
              "type": "object"
            },
            "readOnly": true
          },
          "departmentOptions": {
            "type": "array",
            "items": {
              "properties": {
                "value": {
                  "type": "string",
                  "example": "rnd"
                },
                "label": {
                  "type": "string",
                  "example": "Research & Development"
                }
              },
              "type": "object"
            },
            "readOnly": true
          }
        },
        "type": "object"
      },
      "MembershipsSummary": {
        "properties": {
          "totalMembers": {
            "description": "total number of members",
            "type": "integer",
            "readOnly": true,
            "example": "42"
          },
          "total2FAAdoption": {
            "description": "number of members with 2fa",
            "type": "integer",
            "readOnly": true,
            "example": "5"
          },
          "show2FAAdoption": {
            "description": "whether we should show 2fa adoption widget",
            "type": "boolean",
            "readOnly": true
          },
          "organization": {
            "properties": {
              "pendingInvitations": {
                "type": "integer"
              },
              "admin": {
                "type": "integer"
              },
              "basic": {
                "type": "integer"
              },
              "total": {
                "type": "integer"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "Organization": {
        "properties": {
          "id": {
            "description": "ID of the organization",
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "name": {
            "description": "Organization Name",
            "type": "string",
            "example": "Foo Corp"
          },
          "isHipaa": {
            "description": "Hipaa flag",
            "type": "boolean",
            "readOnly": true,
            "example": true
          },
          "billingIsManagedByFsid": {
            "description": "Does FSID handle the billing rather than products themselves",
            "type": "boolean",
            "readOnly": true,
            "example": true
          },
          "billingIsSuspended": {
            "description": "Is billing account suspended for this org",
            "type": "boolean",
            "readOnly": true,
            "example": true
          },
          "mrr": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/MoneyAmount"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "securityPolicy": {
            "$ref": "#/components/schemas/SecurityPolicy"
          },
          "products": {
            "description": "Products this org has access to",
            "type": "array",
            "items": {
              "type": "string"
            },
            "readOnly": true
          },
          "logoUrl": {
            "description": "Pass in literal 'delete' to remove a file",
            "type": "string",
            "readOnly": true,
            "example": "https://example.com/logo.png"
          },
          "replaceLogoKey": {
            "description": "Used to update a logo",
            "type": "string",
            "writeOnly": true,
            "example": "/path/to/logo",
            "nullable": true
          },
          "userLimits": {
            "description": "User limits for organization products",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationProductUserLimits"
            },
            "readOnly": true,
            "nullable": true
          },
          "productSettings": {
            "description": "Product Specific settings",
            "type": "object",
            "readOnly": true,
            "nullable": true,
            "additionalProperties": true
          },
          "featureToggles": {
            "$ref": "#/components/schemas/OrganizationFeatureToggles"
          },
          "isSubaccount": {
            "description": "Whether this org is a child org",
            "type": "boolean",
            "readOnly": true,
            "example": "true"
          },
          "formsAutoDeleteSubmissionsSettings": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/FormsAutoDeleteSubmissionsSettings"
              }
            ],
            "nullable": true,
            "description": "Forms auto-delete submissions settings"
          },
          "parentOrganization": {
            "title": "parent org",
            "type": "array",
            "items": {
              "properties": {
                "contact": {
                  "description": "Contact email of parent org",
                  "type": "string",
                  "readOnly": true,
                  "example": "john@doe.org",
                  "nullable": true
                },
                "id": {
                  "title": "id",
                  "type": "string",
                  "format": "uuid"
                },
                "name": {
                  "title": "name",
                  "type": "string"
                },
                "logo": {
                  "title": "logo",
                  "type": "string",
                  "example": "https://example.com/logo.png"
                }
              },
              "type": "object"
            }
          }
        },
        "type": "object"
      },
      "OrganizationAppsPage": {
        "description": "View data for 'your apps' page",
        "properties": {
          "apps": {
            "title": "apps",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationApp"
            }
          }
        },
        "type": "object"
      },
      "OrganizationAppAddon": {
        "properties": {
          "name": {
            "description": "Addon name",
            "type": "string",
            "example": "Forms workflows"
          },
          "handle": {
            "description": "Addon handle",
            "type": "string",
            "example": "c:forms-workflows"
          },
          "cost": {
            "description": "Addon cost (formatted)",
            "type": "string",
            "example": "$99 /month",
            "nullable": true
          },
          "trialExpDate": {
            "description": "Date the addon trial expires if trialing",
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "startTrialUrl": {
            "description": "Start trial url (if current user is allowed to start trial)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "OrganizationApp": {
        "description": "View data for app plan",
        "properties": {
          "applicationKey": {
            "description": "App id",
            "type": "string",
            "example": "formstack_classic"
          },
          "trialExpDate": {
            "description": "Date the base plan trial expires if trialing",
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "trialExpired": {
            "description": "If addon trial expired",
            "type": "boolean",
            "nullable": false
          },
          "canTrial": {
            "description": "If app can be trialed",
            "type": "boolean",
            "nullable": false
          },
          "heldByOrganization": {
            "description": "If app is held by org (not necessarily accessible by current user)",
            "type": "boolean",
            "nullable": false
          },
          "plan": {
            "description": "App plan name",
            "type": "string",
            "example": "Forms Pro",
            "nullable": true
          },
          "planHandle": {
            "description": "App plan handle",
            "type": "string",
            "example": "p:forms-teams",
            "nullable": true
          },
          "showBeta": {
            "description": "If in beta",
            "type": "boolean",
            "nullable": false
          },
          "addons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationAppAddon"
            }
          }
        },
        "type": "object"
      },
      "OrganizationFeatureToggles": {
        "properties": {
          "customIdp": {
            "description": "has access to custom org idps",
            "type": "boolean",
            "readOnly": true,
            "example": true
          },
          "subaccounts": {
            "description": "can create/manage sub-accounts",
            "type": "boolean",
            "readOnly": true,
            "example": true
          },
          "certifiedPartner": {
            "description": "org marked as certified partner",
            "type": "boolean",
            "readOnly": true,
            "example": true
          },
          "reseller": {
            "description": "org is a subaccount reseller",
            "type": "boolean",
            "readOnly": true,
            "example": true
          },
          "platformGroups": {
            "description": "org has access to platform groups",
            "type": "boolean",
            "readOnly": true,
            "example": true
          },
          "aiForms": {
            "description": "org has enabled Forms AI features",
            "type": "boolean",
            "readOnly": false,
            "example": true
          },
          "aiDocs": {
            "description": "org has enabled Docs AI features",
            "type": "boolean",
            "readOnly": false,
            "example": true
          },
          "availableLabFeatures": {
            "description": "list of available lab features",
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["aiForms", "aiDocs"]
            },
            "readOnly": true
          },
          "partnerApi": {
            "description": "partner api access",
            "type": "boolean",
            "readOnly": true,
            "example": true
          }
        },
        "type": "object"
      },
      "OrganizationIdp": {
        "properties": {
          "id": {
            "description": "ID of membership",
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "name": {
            "description": "idp name",
            "type": "string",
            "nullable": true
          },
          "type": {
            "description": "idp type",
            "type": "string",
            "enum": ["saml", "oidc"]
          },
          "createdAt": {
            "type": "string",
            "format": "date",
            "example": "2022-11-14T17:00:50-05:00",
            "nullable": false
          },
          "updatedAt": {
            "type": "string",
            "format": "date",
            "example": "2022-11-14T17:00:50-05:00",
            "nullable": false
          },
          "enabled": {
            "description": "idp enabled flag",
            "type": "boolean",
            "readOnly": true,
            "example": true
          },
          "customFields": {
            "title": "custom fields(key-label pairs)",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "newUserProductRoles": {
            "title": "product roles for new users(key-label pairs)",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "createdBy": {
            "type": "string",
            "example": "user@example.com",
            "nullable": true
          },
          "updatedBy": {
            "type": "string",
            "example": "user@example.com",
            "nullable": true
          },
          "settings": {
            "description": "type-specific idp properties",
            "readOnly": true,
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/OrganizationIdpSamlSettings"
              },
              {
                "$ref": "#/components/schemas/OrganizationIdpOIDCSettings"
              }
            ]
          },
          "canEnable": {
            "description": "whether thid idp can be enabled",
            "properties": {
              "allowed": {
                "type": "boolean"
              },
              "reason": {
                "type": "string",
                "nullable": true
              }
            },
            "type": "object",
            "readOnly": true
          }
        },
        "type": "object"
      },
      "OrganizationIdpOIDCSettings": {
        "properties": {
          "providerUrl": {
            "type": "string"
          },
          "clientId": {
            "type": "string"
          },
          "clientSecret": {
            "type": "string",
            "writeOnly": true
          },
          "customScopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "type": "object"
      },
      "OrganizationIdpSamlMetadata": {
        "properties": {
          "entityId": {
            "description": "entity id",
            "type": "string",
            "readOnly": true,
            "example": "https://admin.formstack.com"
          },
          "acsUrl": {
            "description": "acs url",
            "type": "string",
            "readOnly": true,
            "example": "https://admin.formstack.com/orgIdp/26fc9cb8-8313-11ea-9fa1-0242ac120008/process"
          },
          "acsBinding": {
            "description": "acs binding",
            "type": "string",
            "readOnly": true,
            "example": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST"
          },
          "nameIDFormat": {
            "description": "nameId field (Email)",
            "type": "string",
            "readOnly": true,
            "example": "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress"
          },
          "x509Cert": {
            "description": "x509 cert",
            "type": "string",
            "readOnly": true
          },
          "x509CertNew": {
            "description": "optional future x509 cert",
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "spMetadataXml": {
            "description": "sp metadata xml contents",
            "type": "string",
            "readOnly": true
          }
        },
        "type": "object"
      },
      "OrganizationIdpSamlSettings": {
        "properties": {
          "metadataUrl": {
            "description": "idp metadata url",
            "type": "string",
            "nullable": true
          },
          "entityId": {
            "type": "string"
          },
          "acsUrl": {
            "type": "string"
          },
          "x509Certs": {
            "description": "x509 cert(s)",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "type": "object"
      },
      "OrganizationIdpSettings": {
        "properties": {
          "allowUserCreation": {
            "description": "allow new user to be created during login",
            "type": "boolean"
          },
          "enforceIdpAuth": {
            "description": "allow only login through org idp",
            "type": "boolean"
          },
          "relax2fa": {
            "description": "relax Formstack 2FA for SSO logins",
            "type": "boolean"
          },
          "skipNewUserEmail": {
            "description": "quiet user creation(skip new user reset password email",
            "type": "boolean"
          },
          "skipCredentialsStepWhenCameFromApp": {
            "description": "Skip email/password step when org enforces idp auth and redirect user directly to IdP (when signing from an app)",
            "type": "boolean"
          },
          "allowGoogleAuth": {
            "description": "allow login with google",
            "type": "boolean"
          },
          "allowAppleAuth": {
            "description": "allow login with apple",
            "type": "boolean"
          },
          "ssoDomains": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationSsoDomain"
            },
            "readOnly": true
          },
          "claimDomainSetup": {
            "description": "org sso domains claim instructions",
            "properties": {
              "dns": {
                "properties": {
                  "record": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "https": {
                "properties": {
                  "htmlContents": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            },
            "type": "object",
            "readOnly": true
          }
        },
        "type": "object"
      },
      "OrganizationProductUserLimits": {
        "properties": {
          "productId": {
            "description": "Product",
            "type": "string",
            "example": "formstack_classic"
          },
          "limits": {
            "description": "specific limits hash",
            "properties": {
              "x": {
                "description": "setting name",
                "properties": {
                  "count": {
                    "type": "integer"
                  },
                  "limit": {
                    "type": "integer",
                    "nullable": true
                  }
                },
                "type": "object"
              }
            },
            "type": "object",
            "example": {
              "max_users": {
                "limit": 10,
                "current": 5
              }
            }
          }
        },
        "type": "object"
      },
      "OrganizationSsoDomain": {
        "properties": {
          "domain": {
            "type": "string",
            "example": "example.com"
          },
          "createdAt": {
            "type": "string",
            "format": "date",
            "example": "2022-11-14T17:00:50-05:00",
            "nullable": false
          },
          "verificationMethod": {
            "type": "string",
            "enum": ["manual", "dns", "https"],
            "example": "dns"
          },
          "verified": {
            "type": "boolean"
          },
          "verifiedAt": {
            "type": "string",
            "format": "date",
            "example": "2022-11-14T17:00:50-05:00",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "example": "user@example.com",
            "nullable": true
          },
          "updatedBy": {
            "type": "string",
            "example": "user@example.com",
            "nullable": true
          }
        },
        "type": "object"
      },
      "Permission": {
        "properties": {
          "permission": {
            "description": "permission",
            "type": "string",
            "example": "manage_billing"
          },
          "instanceId": {
            "description": "Entity this scoped permission applies to",
            "type": "string",
            "nullable": true
          },
          "instanceName": {
            "description": "Instance name",
            "type": "string",
            "nullable": true
          }
        },
        "type": "object"
      },
      "PersonalAccessToken": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "secret": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "duration": {
            "enum": ["30 days", "60 days", "90 days"],
            "writeOnly": true,
            "nullable": true
          },
          "expiresAt": {
            "description": "Y-m-d\\TH:i:sP format",
            "type": "string",
            "readOnly": true,
            "example": "2019-09-01T12:35:30+00:00",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date",
            "readOnly": true,
            "example": "2022-11-14T17:00:50-05:00",
            "nullable": false
          },
          "updatedAt": {
            "type": "string",
            "format": "date",
            "readOnly": true,
            "example": "2022-11-14T17:00:50-05:00",
            "nullable": false
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "user@example.com",
            "nullable": true
          },
          "updatedBy": {
            "type": "string",
            "readOnly": true,
            "example": "user@example.com",
            "nullable": true
          },
          "status": {
            "description": "status of the key",
            "type": "string",
            "enum": ["active", "revoked", "expired"],
            "readOnly": true
          }
        },
        "type": "object"
      },
      "ProductRole": {
        "properties": {
          "productId": {
            "description": "Product",
            "type": "string",
            "example": "formstack_classic"
          },
          "role": {
            "description": "Role",
            "type": "string",
            "example": "admin"
          }
        },
        "type": "object"
      },
      "ReleaseFlag": {
        "properties": {
          "flag": {
            "description": "flagName",
            "type": "string",
            "readOnly": true
          },
          "enabled": {
            "description": "Is enabled?",
            "type": "boolean",
            "example": "true"
          },
          "value": {
            "description": "Value of the flag",
            "example": "home",
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        "type": "object"
      },
      "SecurityPolicy": {
        "properties": {
          "passwordPolicyDescription": {
            "description": "String representation for password policy",
            "type": "string",
            "readOnly": true
          },
          "passwordMinLength": {
            "description": "Password min length",
            "type": "integer"
          },
          "passwordMustContainLettersAndNumbers": {
            "description": "Password must contain alphanumeric",
            "type": "boolean"
          },
          "preventPasswordReuse": {
            "description": "Prevent password reuse",
            "type": "boolean"
          },
          "enforcePasswordPeriodicChange": {
            "description": "Enforce period password change",
            "type": "boolean"
          },
          "enforceTwoFactorAuth": {
            "description": "Enforce 2FA",
            "type": "boolean"
          },
          "enforceTwoFactorAuthAt": {
            "type": "string",
            "format": "date",
            "example": "2022-11-14T17:00:50-05:00",
            "nullable": false
          },
          "sessionDuration": {
            "description": "Session duration(in seconds",
            "type": "integer"
          },
          "sessionTimeoutOptions": {
            "description": "Session timeout options(in seconds)",
            "type": "array",
            "items": {
              "type": "string"
            },
            "readOnly": true
          },
          "passwordMinLengthFieldMiniumValue": {
            "description": "Minimum allowed password length",
            "type": "integer",
            "readOnly": true
          }
        },
        "type": "object"
      },
      "SignedFileUploadGrant": {
        "properties": {
          "formAttributes": {
            "description": "Array of attributes to be used in a html form tag",
            "type": "object",
            "readOnly": true
          },
          "formInputs": {
            "description": "Array off fields",
            "type": "object"
          }
        },
        "type": "object"
      },
      "Subaccount": {
        "properties": {
          "total": {
            "title": "total",
            "type": "integer"
          },
          "page": {
            "title": "page",
            "type": "integer"
          },
          "data": {
            "title": "result set",
            "type": "array",
            "items": {
              "properties": {
                "id": {
                  "title": "id",
                  "type": "string",
                  "format": "uuid"
                },
                "name": {
                  "title": "name",
                  "type": "string"
                },
                "logo": {
                  "title": "logo",
                  "type": "string",
                  "example": "https://example.com/logo.png"
                },
                "totalUsers": {
                  "title": "totalUsers",
                  "type": "integer"
                },
                "isSuspended": {
                  "title": "isSuspended",
                  "type": "boolean"
                },
                "applications": {
                  "title": "applications",
                  "type": "array",
                  "items": {
                    "type": "string",
                    "example": "formstack_classic"
                  }
                },
                "billing": {
                  "title": "billing (included if you pass includeBilling qs param",
                  "properties": {
                    "periodicity": {
                      "title": "periodicity",
                      "type": "string",
                      "example": "monthly"
                    },
                    "amount": {
                      "$ref": "#/components/schemas/MoneyAmount"
                    },
                    "platformPlanHandle": {
                      "title": "platformPlanHandle",
                      "type": "string",
                      "example": "p:platform-starter",
                      "deprecated": true
                    },
                    "planHandles": {
                      "title": "planHandles",
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "p:platform-starter"
                      }
                    },
                    "canAddAdditionalUsage": {
                      "title": "canAddAdditionalUsage",
                      "type": "boolean",
                      "example": "true"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          }
        },
        "type": "object"
      },
      "SurveyAnswers": {
        "properties": {
          "industry": {
            "type": "array",
            "items": {
              "properties": {
                "value": {
                  "type": "string",
                  "example": "education"
                },
                "label": {
                  "type": "string",
                  "example": "Education"
                }
              },
              "type": "object"
            },
            "readOnly": true
          },
          "departments": {
            "type": "array",
            "items": {
              "properties": {
                "value": {
                  "type": "string",
                  "example": "rnd"
                },
                "label": {
                  "type": "string",
                  "example": "Research & Development"
                }
              },
              "type": "object"
            },
            "readOnly": true
          },
          "goals": {
            "type": "array",
            "items": {
              "properties": {
                "value": {
                  "type": "string",
                  "example": "rnd"
                },
                "label": {
                  "type": "string",
                  "example": "Research & Development"
                }
              },
              "type": "object"
            },
            "readOnly": true
          }
        },
        "type": "object"
      },
      "User": {
        "properties": {
          "id": {
            "description": "ID of the user",
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "firstName": {
            "description": "First Name",
            "type": "string",
            "example": "John"
          },
          "lastName": {
            "description": "Last Name",
            "type": "string",
            "example": "Doe"
          },
          "fullName": {
            "description": "Full Name",
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "description": "Email",
            "type": "string",
            "example": "john@doe.com"
          },
          "timezone": {
            "description": "IANA tz identifier",
            "type": "string",
            "example": "Europe/London"
          },
          "lastLoginAt": {
            "description": "Y-m-d\\TH:i:sP format",
            "type": "string",
            "example": "2019-09-01T12:35:30+00:00",
            "nullable": true
          },
          "securityPolicy": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/SecurityPolicy"
              }
            ],
            "nullable": true,
            "description": "Security policy for user",
            "readOnly": true
          },
          "authSecondFactors": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AuthSecondFactors"
              }
            ],
            "nullable": true,
            "description": "Second factors",
            "readOnly": true
          },
          "currentMembership": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Membership"
              }
            ],
            "nullable": true,
            "description": "Current session Organization membership",
            "readOnly": true
          },
          "avatarUrl": {
            "description": "Avatar url (custom or gravatar)",
            "type": "string",
            "readOnly": true,
            "example": "https://example.com/logo.png"
          },
          "isDefaultAvatar": {
            "type": "boolean",
            "readOnly": true,
            "example": false
          },
          "replaceAvatarKey": {
            "description": "Used to update avatar",
            "type": "string",
            "writeOnly": true,
            "example": "/path/to/avatar",
            "nullable": true
          },
          "impersonatedByParent": {
            "type": "boolean",
            "readOnly": true,
            "example": false,
            "nullable": true
          },
          "hasSuitePlan": {
            "type": "boolean",
            "readOnly": true,
            "example": false,
            "nullable": true
          },
          "hasActiveSubscription": {
            "type": "boolean",
            "readOnly": true,
            "example": false,
            "nullable": true
          },
          "canSeeBillingManage": {
            "description": "Can this account see billing manage page and purchase extras modal",
            "type": "boolean",
            "readOnly": true,
            "nullable": true
          },
          "canSeeBillingOverview": {
            "description": "Can this account see billing overview page",
            "type": "boolean",
            "readOnly": true,
            "nullable": true
          },
          "canSeeInvoices": {
            "description": "Can this account see billing invoices page",
            "type": "boolean",
            "readOnly": true,
            "nullable": true
          },
          "canSeeUserListing": {
            "description": "Can see user listing page",
            "type": "boolean",
            "readOnly": true,
            "nullable": true
          },
          "canBulkInviteUsers": {
            "type": "boolean",
            "readOnly": true,
            "example": false
          },
          "canAccessPersonalAccessTokens": {
            "type": "boolean",
            "readOnly": true,
            "example": false
          },
          "productMetadata": {
            "description": "Product permissions json",
            "type": "object",
            "writeOnly": true,
            "example": {
              "formstack_classic": [],
              "webmerge": []
            },
            "nullable": true
          },
          "permissions": {
            "description": "User permissions in the org",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permission"
            },
            "readOnly": true,
            "nullable": true
          }
        },
        "type": "object"
      }
    },
    "responses": {
      "404": {
        "description": "Membership not be found"
      },
      "422": {
        "description": "Errors occured",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/general_validation_error"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "description": "Bearer authentication"
      }
    }
  },
  "tags": [
    {
      "name": "Billing",
      "description": "Billing"
    },
    {
      "name": "SubaccountBilling",
      "description": "SubaccountBilling"
    },
    {
      "name": "Homepage",
      "description": "Homepage"
    },
    {
      "name": "Activation",
      "description": "Activation"
    },
    {
      "name": "Organization",
      "description": "Organization"
    },
    {
      "name": "BulkMembership",
      "description": "BulkMembership"
    },
    {
      "name": "Group",
      "description": "Group"
    },
    {
      "name": "Membership",
      "description": "Membership"
    },
    {
      "name": "OrganizationIdps",
      "description": "OrganizationIdps"
    },
    {
      "name": "PersonalAccessTokens",
      "description": "PersonalAccessTokens"
    },
    {
      "name": "ProductPermissions",
      "description": "ProductPermissions"
    },
    {
      "name": "ReleaseFlag",
      "description": "ReleaseFlag"
    },
    {
      "name": "Subaccounts",
      "description": "Subaccounts"
    },
    {
      "name": "User",
      "description": "User"
    },
    {
      "name": "SalesAndMarketing",
      "description": "SalesAndMarketing"
    },
    {
      "name": "Signup",
      "description": "Signup"
    }
  ]
}
